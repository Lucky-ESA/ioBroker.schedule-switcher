{
  "version": 3,
  "sources": ["../../src/schedules/Schedule.ts"],
  "sourcesContent": ["import type { Destroyable } from \"../Destroyable\";\nimport type { UniversalTriggerScheduler } from \"../scheduler/UniversalTriggerScheduler\";\nimport type { LoggingService } from \"../services/LoggingService\";\nimport type { Trigger } from \"../triggers/Trigger\";\n\n/**\n * Schedule\n */\nexport abstract class Schedule implements Destroyable {\n    private enabled = false;\n    private name = \"New Schedule\";\n    private triggers: Trigger[] = [];\n    private readonly triggerScheduler: UniversalTriggerScheduler;\n    private logger: LoggingService;\n\n    protected constructor(triggerScheduler: UniversalTriggerScheduler, logger: LoggingService) {\n        if (triggerScheduler == null) {\n            throw new Error(`triggerScheduler may not be null or undefined`);\n        }\n        this.triggerScheduler = triggerScheduler;\n        this.logger = logger;\n    }\n\n    /**\n     * @param enabled enabled\n     */\n    public setEnabled(enabled: boolean): void {\n        if (enabled !== this.enabled) {\n            if (enabled) {\n                this.getTriggers().forEach(t => this.triggerScheduler.register(t));\n            } else {\n                this.triggerScheduler.destroy();\n            }\n            this.enabled = enabled;\n        }\n    }\n\n    /**\n     * @param name change name\n     */\n    public setName(name: string): void {\n        if (name == null) {\n            this.logger.logWarn(`name may not be null or undefined`);\n            name = \"Unknown\";\n        }\n        this.name = name;\n    }\n\n    /**\n     * isEnabled\n     */\n    public isEnabled(): boolean {\n        return this.enabled;\n    }\n\n    /**\n     * getName\n     */\n    public getName(): string {\n        return this.name;\n    }\n\n    /**\n     * getTriggers\n     */\n    public getTriggers(): Trigger[] {\n        return this.triggers;\n    }\n\n    /**\n     * @param trigger Trigger\n     */\n    public addTrigger(trigger: Trigger): void {\n        if (this.findTriggerById(trigger.getId())) {\n            this.logger.logWarn(`Cannot add trigger, trigger id ${trigger.getId()} exists already`);\n        } else {\n            this.triggers.push(trigger);\n            if (this.isEnabled()) {\n                this.triggerScheduler.register(trigger);\n            }\n        }\n    }\n\n    /**\n     * loadregister\n     */\n    public loadregister(): void {\n        for (const r of this.triggers) {\n            this.logger.logDebug(`Schedule ${r}`);\n        }\n        this.triggerScheduler.loadregister();\n    }\n\n    /**\n     * @param trigger Trigger\n     */\n    public updateTrigger(trigger: Trigger): void {\n        const index = this.getTriggers().findIndex(t => t.getId() === trigger.getId());\n        if (index == -1) {\n            this.logger.logWarn(`Cannot update trigger, trigger id ${trigger.getId()} not found`);\n        } else {\n            if (this.isEnabled()) {\n                this.triggerScheduler.unregister(this.getTriggers()[index]);\n                this.triggerScheduler.register(trigger);\n            }\n            this.triggers[index] = trigger;\n        }\n    }\n\n    /**\n     * @param triggerId ID\n     */\n    public removeTrigger(triggerId: string): void {\n        const trigger = this.triggers.find(t => t.getId() === triggerId);\n        if (trigger) {\n            this.removeTriggerAndUnregister(trigger);\n        } else {\n            this.logger.logInfo(`Cannot delete trigger, trigger id ${triggerId} not found`);\n        }\n    }\n\n    /**\n     * destroy\n     */\n    public destroy(): void {\n        if (this.isEnabled()) {\n            this.triggerScheduler.destroy();\n        }\n        this.triggers = [];\n    }\n\n    private removeTriggerAndUnregister(trigger: Trigger): void {\n        if (this.isEnabled()) {\n            this.triggerScheduler.unregister(trigger);\n        }\n        this.triggers = this.triggers.filter(t => t.getId() !== trigger.getId());\n    }\n\n    private findTriggerById(id: string): Trigger | undefined {\n        return this.getTriggers().find(t => t.getId() === id);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
