{
  "version": 3,
  "sources": ["../../src/serialization/OnOffScheduleSerializer.ts"],
  "sourcesContent": ["import type { Action } from \"../actions/Action\";\nimport { OnOffStateAction } from \"../actions/OnOffStateAction\";\nimport type { UniversalTriggerScheduler } from \"../scheduler/UniversalTriggerScheduler\";\nimport { OnOffSchedule } from \"../schedules/OnOffSchedule\";\nimport type { LoggingService } from \"../services/LoggingService\";\nimport type { Trigger } from \"../triggers/Trigger\";\nimport { ActionReferenceSerializer } from \"./ActionReferenceSerializer\";\nimport type { Serializer } from \"./Serializer\";\nimport type { UniversalSerializer } from \"./UniversalSerializer\";\n\n/**\n * OnOffScheduleSerializer\n */\nexport class OnOffScheduleSerializer implements Serializer<OnOffSchedule> {\n    /**\n     * @param triggerScheduler Scheduler\n     * @param actionSerializer Serializer\n     * @param triggerSerializer Serializer\n     * @param adapter ioBroker\n     * @param loggingService Log Service\n     */\n    constructor(\n        private triggerScheduler: UniversalTriggerScheduler,\n        private actionSerializer: UniversalSerializer<Action>,\n        private triggerSerializer: UniversalSerializer<Trigger>,\n        private adapter: ioBroker.Adapter,\n        private loggingService: LoggingService,\n    ) {}\n\n    /**\n     * @param stringToDeserialize OnOffSchedule\n     */\n    deserialize(stringToDeserialize: string): OnOffSchedule {\n        const json = JSON.parse(stringToDeserialize);\n        if (json.type !== this.getType()) {\n            throw new Error(`Can not deserialize object of type ${json.type}`);\n        }\n        const onAction = this.actionSerializer.deserialize(JSON.stringify(json.onAction));\n        const offAction = this.actionSerializer.deserialize(JSON.stringify(json.offAction));\n\n        if (onAction instanceof OnOffStateAction && offAction instanceof OnOffStateAction) {\n            const schedule = new OnOffSchedule(onAction, offAction, this.triggerScheduler, this.loggingService);\n            schedule.setName(json.name);\n\n            this.useActionReferenceSerializer(schedule);\n            json.triggers.forEach((t: any) => {\n                schedule.addTrigger(this.triggerSerializer.deserialize(JSON.stringify(t)));\n            });\n\n            return schedule;\n        }\n        throw new Error(\"Actions are not OnOffStateActions\");\n    }\n\n    /**\n     * @param schedule OnOffSchedule\n     */\n    serialize(schedule: OnOffSchedule): string {\n        const json: any = {\n            type: this.getType(),\n            name: schedule.getName(),\n            onAction: JSON.parse(this.actionSerializer.serialize(schedule.getOnAction())),\n            offAction: JSON.parse(this.actionSerializer.serialize(schedule.getOffAction())),\n        };\n        this.useActionReferenceSerializer(schedule);\n        json.triggers = schedule.getTriggers().map(t => JSON.parse(this.triggerSerializer.serialize(t)));\n        return JSON.stringify(json);\n    }\n\n    /**\n     * getType\n     */\n    getType(): string {\n        return \"OnOffSchedule\";\n    }\n\n    /**\n     * @param schedule OnOffSchedule\n     */\n    public getTriggerSerializer(schedule: OnOffSchedule): UniversalSerializer<Trigger> {\n        if (schedule == null) {\n            throw new Error(\"Schedule may not be null/undefined\");\n        }\n        this.useActionReferenceSerializer(schedule);\n        return this.triggerSerializer;\n    }\n\n    private useActionReferenceSerializer(schedule: OnOffSchedule): void {\n        this.actionSerializer.useSerializer(\n            new ActionReferenceSerializer(\n                OnOffStateAction.prototype.constructor.name,\n                new Map([\n                    [\"On\", schedule.getOnAction()],\n                    [\"Off\", schedule.getOffAction()],\n                ]),\n                this.adapter,\n            ),\n        );\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,8BAAiC;AAEjC,2BAA8B;AAG9B,uCAA0C;AAOnC,MAAM,wBAA6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQtE,YACY,kBACA,kBACA,mBACA,SACA,gBACV;AALU;AACA;AACA;AACA;AACA;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKH,YAAY,qBAA4C;AACpD,UAAM,OAAO,KAAK,MAAM,mBAAmB;AAC3C,QAAI,KAAK,SAAS,KAAK,QAAQ,GAAG;AAC9B,YAAM,IAAI,MAAM,sCAAsC,KAAK,IAAI,EAAE;AAAA,IACrE;AACA,UAAM,WAAW,KAAK,iBAAiB,YAAY,KAAK,UAAU,KAAK,QAAQ,CAAC;AAChF,UAAM,YAAY,KAAK,iBAAiB,YAAY,KAAK,UAAU,KAAK,SAAS,CAAC;AAElF,QAAI,oBAAoB,4CAAoB,qBAAqB,0CAAkB;AAC/E,YAAM,WAAW,IAAI,mCAAc,UAAU,WAAW,KAAK,kBAAkB,KAAK,cAAc;AAClG,eAAS,QAAQ,KAAK,IAAI;AAE1B,WAAK,6BAA6B,QAAQ;AAC1C,WAAK,SAAS,QAAQ,CAAC,MAAW;AAC9B,iBAAS,WAAW,KAAK,kBAAkB,YAAY,KAAK,UAAU,CAAC,CAAC,CAAC;AAAA,MAC7E,CAAC;AAED,aAAO;AAAA,IACX;AACA,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,UAAiC;AACvC,UAAM,OAAY;AAAA,MACd,MAAM,KAAK,QAAQ;AAAA,MACnB,MAAM,SAAS,QAAQ;AAAA,MACvB,UAAU,KAAK,MAAM,KAAK,iBAAiB,UAAU,SAAS,YAAY,CAAC,CAAC;AAAA,MAC5E,WAAW,KAAK,MAAM,KAAK,iBAAiB,UAAU,SAAS,aAAa,CAAC,CAAC;AAAA,IAClF;AACA,SAAK,6BAA6B,QAAQ;AAC1C,SAAK,WAAW,SAAS,YAAY,EAAE,IAAI,OAAK,KAAK,MAAM,KAAK,kBAAkB,UAAU,CAAC,CAAC,CAAC;AAC/F,WAAO,KAAK,UAAU,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAKA,UAAkB;AACd,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAKO,qBAAqB,UAAuD;AAC/E,QAAI,YAAY,MAAM;AAClB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AACA,SAAK,6BAA6B,QAAQ;AAC1C,WAAO,KAAK;AAAA,EAChB;AAAA,EAEQ,6BAA6B,UAA+B;AAChE,SAAK,iBAAiB;AAAA,MAClB,IAAI;AAAA,QACA,yCAAiB,UAAU,YAAY;AAAA,QACvC,oBAAI,IAAI;AAAA,UACJ,CAAC,MAAM,SAAS,YAAY,CAAC;AAAA,UAC7B,CAAC,OAAO,SAAS,aAAa,CAAC;AAAA,QACnC,CAAC;AAAA,QACD,KAAK;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AACJ;",
  "names": []
}
