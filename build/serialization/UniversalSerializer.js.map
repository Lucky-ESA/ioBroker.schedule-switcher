{
  "version": 3,
  "sources": ["../../src/serialization/UniversalSerializer.ts"],
  "sourcesContent": ["import type { LoggingService } from \"../services/LoggingService\";\nimport type { Serializer } from \"./Serializer\";\n\n/**\n * UniversalSerializer\n */\nexport class UniversalSerializer<T extends Record<string, any>> implements Serializer<T> {\n    /**\n     * @param serializers Serializer\n     * @param logger LoggingService\n     */\n    constructor(\n        private serializers: Serializer<T>[],\n        private logger: LoggingService,\n    ) {\n        this.logger = logger;\n    }\n\n    /**\n     * @param serializer Serializer\n     */\n    public useSerializer(serializer: Serializer<T>): void {\n        if (serializer == null) {\n            throw new Error(\"Serializer to use may not be null/undefined\");\n        }\n        this.serializers = this.serializers.filter(s => s.getType() !== serializer.getType());\n        this.serializers.push(serializer);\n    }\n\n    /**\n     * @param object constructor\n     */\n    public serialize(object: T): string {\n        this.logger.logDebug(`object.constructor.name: ${object.constructor.name}`);\n        const serializer = this.serializers.find(s => s.getType() === object.constructor.name);\n        if (serializer) {\n            return serializer.serialize(object);\n        }\n        throw new Error(`No serializer for object of type ${object.constructor.name} found`);\n    }\n\n    /**\n     * @param stringToDeserialize Deserialize\n     */\n    public deserialize(stringToDeserialize: string): T {\n        const json = JSON.parse(stringToDeserialize);\n        const serializer = this.serializers.find(s => s.getType() === json.type);\n        if (serializer) {\n            return serializer.deserialize(stringToDeserialize);\n        }\n        throw new Error(`No serializer for object of type ${json.type} found`);\n    }\n\n    /**\n     * getType\n     */\n    getType(): string {\n        return \"Universal\";\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO,MAAM,oBAA4E;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrF,YACY,aACA,QACV;AAFU;AACA;AAER,SAAK,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKO,cAAc,YAAiC;AAClD,QAAI,cAAc,MAAM;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AACA,SAAK,cAAc,KAAK,YAAY,OAAO,OAAK,EAAE,QAAQ,MAAM,WAAW,QAAQ,CAAC;AACpF,SAAK,YAAY,KAAK,UAAU;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAKO,UAAU,QAAmB;AAChC,SAAK,OAAO,SAAS,4BAA4B,OAAO,YAAY,IAAI,EAAE;AAC1E,UAAM,aAAa,KAAK,YAAY,KAAK,OAAK,EAAE,QAAQ,MAAM,OAAO,YAAY,IAAI;AACrF,QAAI,YAAY;AACZ,aAAO,WAAW,UAAU,MAAM;AAAA,IACtC;AACA,UAAM,IAAI,MAAM,oCAAoC,OAAO,YAAY,IAAI,QAAQ;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA,EAKO,YAAY,qBAAgC;AAC/C,UAAM,OAAO,KAAK,MAAM,mBAAmB;AAC3C,UAAM,aAAa,KAAK,YAAY,KAAK,OAAK,EAAE,QAAQ,MAAM,KAAK,IAAI;AACvE,QAAI,YAAY;AACZ,aAAO,WAAW,YAAY,mBAAmB;AAAA,IACrD;AACA,UAAM,IAAI,MAAM,oCAAoC,KAAK,IAAI,QAAQ;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA,EAKA,UAAkB;AACd,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
