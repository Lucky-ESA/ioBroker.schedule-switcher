{
  "version": 3,
  "sources": ["../../src/serialization/ActionReferenceSerializer.ts"],
  "sourcesContent": ["import { Action } from \"../actions/Action\";\nimport { Serializer } from \"./Serializer\";\n\nexport class ActionReferenceSerializer implements Serializer<Action> {\n    private readonly referencableActions: Map<string, Action>;\n    private readonly typeToReference: string;\n    private readonly adapter: ioBroker.Adapter;\n    constructor(typeToReference: string, referencableActions: Map<string, Action>, adapter: ioBroker.Adapter) {\n        this.typeToReference = typeToReference;\n        this.referencableActions = referencableActions;\n        this.adapter = adapter;\n    }\n\n    deserialize(stringToDeserialize: string): Action {\n        const json = JSON.parse(stringToDeserialize);\n        if (json.type !== this.getType()) {\n            throw new Error(`Can not reference object of type ${json.type}`);\n        }\n        const found = this.referencableActions.get(json.name);\n        if (found) {\n            return found;\n        } else {\n            throw new Error(`No existing action found with name ${json.name} to reference`);\n        }\n    }\n\n    serialize(objectToSerialize: Action): string {\n        if (objectToSerialize == null) {\n            throw new Error(\"objectToSerialize may not be null or undefined.\");\n        }\n        let name = null;\n        for (const entry of this.referencableActions.entries()) {\n            if (entry[1] === objectToSerialize) {\n                name = entry[0];\n                break;\n            }\n        }\n        this.adapter.log.debug(`Name: ${name}`);\n        if (name) {\n            return JSON.stringify({\n                type: this.getType(),\n                name: name,\n            });\n        } else {\n            throw new Error(\"no existing action found\");\n        }\n    }\n\n    getType(): string {\n        return this.typeToReference;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGO,MAAM,0BAAwD;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AAAA,EACjB,YAAY,iBAAyB,qBAA0C,SAA2B;AACtG,SAAK,kBAAkB;AACvB,SAAK,sBAAsB;AAC3B,SAAK,UAAU;AAAA,EACnB;AAAA,EAEA,YAAY,qBAAqC;AAC7C,UAAM,OAAO,KAAK,MAAM,mBAAmB;AAC3C,QAAI,KAAK,SAAS,KAAK,QAAQ,GAAG;AAC9B,YAAM,IAAI,MAAM,oCAAoC,KAAK,IAAI,EAAE;AAAA,IACnE;AACA,UAAM,QAAQ,KAAK,oBAAoB,IAAI,KAAK,IAAI;AACpD,QAAI,OAAO;AACP,aAAO;AAAA,IACX,OAAO;AACH,YAAM,IAAI,MAAM,sCAAsC,KAAK,IAAI,eAAe;AAAA,IAClF;AAAA,EACJ;AAAA,EAEA,UAAU,mBAAmC;AACzC,QAAI,qBAAqB,MAAM;AAC3B,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACrE;AACA,QAAI,OAAO;AACX,eAAW,SAAS,KAAK,oBAAoB,QAAQ,GAAG;AACpD,UAAI,MAAM,CAAC,MAAM,mBAAmB;AAChC,eAAO,MAAM,CAAC;AACd;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,QAAQ,IAAI,MAAM,SAAS,IAAI,EAAE;AACtC,QAAI,MAAM;AACN,aAAO,KAAK,UAAU;AAAA,QAClB,MAAM,KAAK,QAAQ;AAAA,QACnB;AAAA,MACJ,CAAC;AAAA,IACL,OAAO;AACH,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC9C;AAAA,EACJ;AAAA,EAEA,UAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AACJ;",
  "names": []
}
