{
  "version": 3,
  "sources": ["../../src/serialization/ActionReferenceSerializer.ts"],
  "sourcesContent": ["import type { Action } from \"../actions/Action\";\nimport type { LoggingService } from \"../services/LoggingService\";\nimport type { Serializer } from \"./Serializer\";\n\n/**\n * ActionReferenceSerializer\n */\nexport class ActionReferenceSerializer implements Serializer<Action> {\n    private readonly referencableActions: Map<string, Action>;\n    private readonly typeToReference: string;\n    /**\n     *\n     * @param typeToReference Reference\n     * @param referencableActions Actions\n     * @param logger Logs\n     */\n    constructor(\n        typeToReference: string,\n        referencableActions: Map<string, Action>,\n        private logger: LoggingService,\n    ) {\n        this.typeToReference = typeToReference;\n        this.referencableActions = referencableActions;\n        this.logger = logger;\n    }\n\n    /**\n     * @param stringToDeserialize Action\n     */\n    deserialize(stringToDeserialize: string): Action {\n        const json = JSON.parse(stringToDeserialize);\n        if (json.type !== this.getType()) {\n            throw new Error(`Can not reference object of type ${json.type}`);\n        }\n        const found = this.referencableActions.get(json.name);\n        if (found) {\n            return found;\n        }\n        throw new Error(`No existing action found with name ${json.name} to reference`);\n    }\n\n    /**\n     * @param objectToSerialize Action\n     */\n    serialize(objectToSerialize: Action): string {\n        if (objectToSerialize == null) {\n            throw new Error(\"objectToSerialize may not be null or undefined.\");\n        }\n        let name = null;\n        for (const entry of this.referencableActions.entries()) {\n            if (entry[1] === objectToSerialize) {\n                name = entry[0];\n                break;\n            }\n        }\n        this.logger.logDebug(`Name: ${name}`);\n        if (name) {\n            return JSON.stringify({\n                type: this.getType(),\n                name: name,\n            });\n        }\n        throw new Error(\"no existing action found\");\n    }\n\n    /**\n     * getType\n     */\n    getType(): string {\n        return this.typeToReference;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,MAAM,0BAAwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjE,YACI,iBACA,qBACQ,QACV;AADU;AAER,SAAK,kBAAkB;AACvB,SAAK,sBAAsB;AAC3B,SAAK,SAAS;AAAA,EAClB;AAAA,EAhBiB;AAAA,EACA;AAAA;AAAA;AAAA;AAAA,EAoBjB,YAAY,qBAAqC;AAC7C,UAAM,OAAO,KAAK,MAAM,mBAAmB;AAC3C,QAAI,KAAK,SAAS,KAAK,QAAQ,GAAG;AAC9B,YAAM,IAAI,MAAM,oCAAoC,KAAK,IAAI,EAAE;AAAA,IACnE;AACA,UAAM,QAAQ,KAAK,oBAAoB,IAAI,KAAK,IAAI;AACpD,QAAI,OAAO;AACP,aAAO;AAAA,IACX;AACA,UAAM,IAAI,MAAM,sCAAsC,KAAK,IAAI,eAAe;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,mBAAmC;AACzC,QAAI,qBAAqB,MAAM;AAC3B,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACrE;AACA,QAAI,OAAO;AACX,eAAW,SAAS,KAAK,oBAAoB,QAAQ,GAAG;AACpD,UAAI,MAAM,CAAC,MAAM,mBAAmB;AAChC,eAAO,MAAM,CAAC;AACd;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,OAAO,SAAS,SAAS,IAAI,EAAE;AACpC,QAAI,MAAM;AACN,aAAO,KAAK,UAAU;AAAA,QAClB,MAAM,KAAK,QAAQ;AAAA,QACnB;AAAA,MACJ,CAAC;AAAA,IACL;AACA,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAKA,UAAkB;AACd,WAAO,KAAK;AAAA,EAChB;AACJ;",
  "names": []
}
