{
  "version": 3,
  "sources": ["../src/Coordinate.ts"],
  "sourcesContent": ["import type { CoordinateTypes } from \"./CoordinateTypes\";\nimport type { LoggingService } from \"./services/LoggingService\";\n\n/**\n * @param latitude number\n * @param longitude number\n */\nexport class Coordinate implements CoordinateTypes {\n    private readonly latitude: number;\n    private readonly longitude: number;\n\n    /**\n     * @param latitude number\n     * @param longitude number\n     * @param logger ioBroker.Adapter\n     */\n    constructor(latitude: number, longitude: number, logger: LoggingService) {\n        if (Math.abs(latitude) > 90) {\n            logger.logError(\"Latitude must be < 90 and > -90 - use 90\");\n            this.latitude = 90;\n        } else {\n            this.latitude = latitude;\n        }\n        if (Math.abs(longitude) > 180) {\n            logger.logError(\"Longitude must be < 180 and > -180 - use 180\");\n            this.longitude = 180;\n        } else {\n            this.longitude = longitude;\n        }\n    }\n\n    /**\n     * @returns latitude\n     */\n    public getLatitude(): number {\n        return this.latitude;\n    }\n\n    /**\n     * @returns longitude\n     */\n    public getLongitude(): number {\n        return this.longitude;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOO,MAAM,WAAsC;AAAA,EAC9B;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjB,YAAY,UAAkB,WAAmB,QAAwB;AACrE,QAAI,KAAK,IAAI,QAAQ,IAAI,IAAI;AACzB,aAAO,SAAS,0CAA0C;AAC1D,WAAK,WAAW;AAAA,IACpB,OAAO;AACH,WAAK,WAAW;AAAA,IACpB;AACA,QAAI,KAAK,IAAI,SAAS,IAAI,KAAK;AAC3B,aAAO,SAAS,8CAA8C;AAC9D,WAAK,YAAY;AAAA,IACrB,OAAO;AACH,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKO,cAAsB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,eAAuB;AAC1B,WAAO,KAAK;AAAA,EAChB;AACJ;",
  "names": []
}
