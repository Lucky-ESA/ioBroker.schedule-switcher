{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport { cancelJob, RecurrenceRule, scheduleJob } from \"node-schedule\";\nimport { getTimes } from \"suncalc\";\nimport type { Action } from \"./actions/Action\";\nimport type { Condition } from \"./actions/conditions/Condition\";\nimport { Coordinate } from \"./Coordinate\";\nimport { VisHtmlTable } from \"./html/VisHtmlTable\";\nimport { AstroTriggerScheduler } from \"./scheduler/AstroTriggerScheduler\";\nimport { OneTimeTriggerScheduler } from \"./scheduler/OneTimeTriggerScheduler\";\nimport { TimeTriggerScheduler } from \"./scheduler/TimeTriggerScheduler\";\nimport { UniversalTriggerScheduler } from \"./scheduler/UniversalTriggerScheduler\";\nimport type { Schedule } from \"./schedules/Schedule\";\nimport { AstroTriggerSerializer } from \"./serialization/AstroTriggerSerializer\";\nimport { ConditionActionSerializer } from \"./serialization/ConditionActionSerializer\";\nimport { StringStateAndConstantConditionSerializer } from \"./serialization/conditions/StringStateAndConstantConditionSerializer\";\nimport { StringStateAndStateConditionSerializer } from \"./serialization/conditions/StringStateAndStateConditionSerializer\";\nimport { OneTimeTriggerSerializer } from \"./serialization/OneTimeTriggerSerializer\";\nimport { OnOffScheduleSerializer } from \"./serialization/OnOffScheduleSerializer\";\nimport { OnOffStateActionSerializer } from \"./serialization/OnOffStateActionSerializer\";\nimport { TimeTriggerSerializer } from \"./serialization/TimeTriggerSerializer\";\nimport { UniversalSerializer } from \"./serialization/UniversalSerializer\";\nimport { IoBrokerLoggingService } from \"./services/IoBrokerLoggingService\";\nimport { IoBrokerStateService } from \"./services/IoBrokerStateService\";\nimport { IoBrokerValidationState } from \"./services/IoBrokerValidationState\";\nimport { MessageService } from \"./services/MessageService\";\nimport type { Trigger } from \"./triggers/Trigger\";\ninterface schedulesData {\n    stateId: number | null;\n    active: string | null;\n    count: string | null;\n    objectid: string | null;\n    objectname: string | null;\n}\n\nclass ScheduleSwitcher extends utils.Adapter {\n    private scheduleIdToSchedule: Map<string, Schedule> = new Map<string, Schedule>();\n    private loggingService = new IoBrokerLoggingService(this);\n    private stateService = new IoBrokerStateService(this);\n    private coordinate: Coordinate | undefined;\n    private messageService: MessageService | undefined;\n    private widgetControl: ioBroker.Interval | undefined | null;\n    private nextAstroTime: any;\n    private nextActionTime: any;\n    private setCountTriggerStart: ioBroker.Timeout | undefined | null;\n    private vishtmltable = new VisHtmlTable(this);\n    private first: boolean = false;\n    public validation: IoBrokerValidationState | undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"schedule-switcher\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n        this.widgetControl = null;\n        this.nextAstroTime = null;\n        this.nextActionTime = null;\n        this.setCountTriggerStart = null;\n    }\n\n    private getEnabledIdFromScheduleId(scheduleId: string): string {\n        return scheduleId.replace(\"data\", \"enabled\");\n    }\n\n    private getScheduleIdFromEnabledId(scheduleId: string): string {\n        return scheduleId.replace(\"enabled\", \"data\");\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        if (!this.config.usehtml) {\n            await this.delObjectAsync(\"html\", { recursive: true });\n        }\n        await this.checkValueAttribute();\n        const obj = await this.getForeignObjectAsync(\"system.config\");\n        let lang = \"de\";\n        if (obj && obj.common && obj.common.language) {\n            lang = obj.common.language;\n        }\n        if (this.config.usehtml) {\n            await this.vishtmltable.createStates(lang);\n        }\n        this.config.schedules.onOff = await this.checkConfig(this.config.schedulesData as Array<schedulesData>);\n        this.log.debug(`onoff: ${JSON.stringify(this.config.schedules.onOff)}`);\n        await this.initValidation();\n        await this.initMessageService();\n        await this.fixStateStructure(this.config.schedules);\n        await this.validation?.validationView(utils.getAbsoluteDefaultDataDir());\n        await this.validation?.setNextTime();\n        await this.validation?.setActionTime();\n        const record = await this.getStatesAsync(`schedule-switcher.${this.instance}.*`);\n        for (const id in record) {\n            if (id.toString().indexOf(\".data\") !== -1) {\n                const state = record[id];\n                await this.vishtmltable.changeTrigger(id, state, false);\n                this.log.debug(`got state: ${state ? JSON.stringify(state) : \"null\"} with id: ${id}`);\n                if (state) {\n                    this.log.info(`ID: ${id}`);\n                    if (typeof state.val === \"string\" && state.val.startsWith(\"{\")) {\n                        const stateVal = JSON.parse(state.val);\n                        if (stateVal && stateVal.active == null) {\n                            stateVal.active = false;\n                            await this.setState(id, { val: JSON.stringify(stateVal), ack: true });\n                        }\n                        await this.validation?.validation(id, stateVal, false);\n                        if (typeof stateVal === \"object\" && Object.keys(stateVal).length > 0) {\n                            await this.onScheduleChange(id, JSON.stringify(stateVal));\n                        } else {\n                            this.log.error(`Skip id ${id} - Wrong values!!`);\n                        }\n                    } else {\n                        this.log.error(`Could not retrieve state for ${id}`);\n                    }\n                } else {\n                    this.log.error(`Could not retrieve state for ${id}`);\n                }\n            }\n        }\n        await this.refreshAstroTime();\n        await this.refreshActionTime();\n        await this.vishtmltable.updateHTML();\n        this.subscribeStates(`*`);\n        this.widgetControl = this.setInterval(\n            async () => {\n                await this.validation?.validationView(utils.getAbsoluteDefaultDataDir());\n            },\n            24 * 60 * 1000 * 60,\n        );\n        this.setCountTriggerStart = this.setTimeout(async () => {\n            await this.messageService?.setCountTrigger();\n            this.setCountTriggerStart = undefined;\n            this.moreLogs();\n        }, 3000);\n    }\n\n    private async onUnload(callback: () => void): Promise<void> {\n        this.log.info(\"cleaning everything up...\");\n        this.widgetControl && this.clearInterval(this.widgetControl);\n        this.setCountTriggerStart && this.clearTimeout(this.setCountTriggerStart);\n        for (const id of this.scheduleIdToSchedule.keys()) {\n            try {\n                this.scheduleIdToSchedule.get(id)?.destroy();\n            } catch (e) {\n                this.logError(e as Error);\n                this.log.error(`ScheduleIdToSchedule!`);\n            }\n        }\n        try {\n            this.scheduleIdToSchedule.clear();\n        } catch (e) {\n            this.logError(e as Error);\n            this.log.error(`scheduleIdToSchedule clear!`);\n        }\n        await this.nextAstroTime?.cancel();\n        await this.nextActionTime?.cancel();\n        await this.messageService?.destroy();\n        await this.stateService.destroy();\n        callback();\n    }\n\n    private async refreshAstroTime(): Promise<void> {\n        const rule = new RecurrenceRule();\n        rule.dayOfWeek = [0, 1, 2, 3, 4, 5, 6];\n        rule.hour = 2;\n        rule.minute = 2;\n        this.nextAstroTime = scheduleJob(rule, async () => {\n            this.log.info(\"Start Update Astrotime!\");\n            await this.validation?.setNextTime();\n        });\n        this.moreLogs();\n        return Promise.resolve();\n    }\n\n    private async refreshActionTime(): Promise<void> {\n        const rule = new RecurrenceRule();\n        rule.dayOfWeek = [0, 1, 2, 3, 4, 5, 6];\n        rule.hour = 0;\n        rule.minute = 1;\n        this.nextActionTime = scheduleJob(rule, async () => {\n            this.log.info(\"Start Update next time switch!\");\n            await this.validation?.setActionTime();\n        });\n        this.moreLogs();\n        return Promise.resolve();\n    }\n\n    private moreLogs(): void {\n        for (const id of this.scheduleIdToSchedule.keys()) {\n            this.scheduleIdToSchedule.get(id)?.loadregister();\n        }\n    }\n\n    private async checkConfig(config: Array<schedulesData>): Promise<any> {\n        if (config && config.length > 0) {\n            const allIds: number[] = [];\n            for (const state of config) {\n                if (state && state.stateId != null) {\n                    if (!allIds.includes(state.stateId)) {\n                        allIds.push(state.stateId);\n                    } else {\n                        state.stateId = null;\n                        this.log.error(`Double stateId is not allowed!!!`);\n                    }\n                }\n            }\n            let isChange = false;\n            for (const state of config) {\n                let count = 0;\n                if (state.stateId == null) {\n                    const nextid: number = await this.nextId(allIds, 0);\n                    state.stateId = nextid;\n                    allIds.push(nextid);\n                    count = nextid;\n                    isChange = true;\n                } else {\n                    count = state.stateId;\n                }\n                const check = await this.getStateAsync(`schedule-switcher.0.onoff.${count}.data`);\n                const enabled = await this.getStateAsync(`schedule-switcher.0.onoff.${count}.enabled`);\n                if (check && check.val != null && typeof check.val === \"string\") {\n                    const json = JSON.parse(check.val);\n                    state.count = json.triggers.length;\n                    state.objectid = `schedule-switcher.0.onoff.${count}.data`;\n                    state.objectname = json.name;\n                }\n                if (enabled && enabled.val != null) {\n                    state.active = enabled.val.toString();\n                }\n            }\n            //if (allIds.length != this.config.schedules.onOff.length) {\n            //    this.log.debug(`Difference ${allIds.length} - ${this.config.schedules.onOff.length}`);\n            //    isChange = true;\n            //}\n            if (isChange) {\n                this.log.info(\n                    `Cleanup native...restart adapter now... ${JSON.stringify(config)} - ${JSON.stringify(allIds)}`,\n                );\n                await this.extendForeignObjectAsync(`system.adapter.${this.namespace}`, {\n                    native: { schedulesData: config, schedules: { onOff: allIds } },\n                });\n            }\n            return allIds;\n        }\n    }\n\n    private nextId(ids: number[], start: number): Promise<number> {\n        const removeDuplicate = (arr: number[]): number[] => {\n            return arr.filter((item, index) => arr.indexOf(item) === index);\n        };\n        ids.sort((a, b) => a - b);\n        removeDuplicate(ids).every(a => {\n            if (start === a) {\n                start = a + 1;\n                return true;\n            }\n        });\n        return Promise.resolve(start);\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * @param id Object ID\n     * @param state State value\n     */\n    private async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        if (state) {\n            if (!state.ack) {\n                const command = id.split(\".\").pop();\n                if (command === \"data\") {\n                    void this.updateData(id, state);\n                } else if (command === \"enabled\") {\n                    void this.updateEnabled(id, state);\n                } else if (command === \"sendto\" && typeof state.val === \"string\") {\n                    this.log.debug(\"is sendto id\");\n                    void this.setSendTo(state.val);\n                } else if (command === \"update\" && state.val) {\n                    void this.updateValidation(id);\n                    return;\n                }\n                const secsplit = id.split(\".\")[id.split(\".\").length - 2];\n                if (\n                    secsplit === \"html\" &&\n                    typeof command === \"string\" &&\n                    command != \"html_code\" &&\n                    command != \"update\"\n                ) {\n                    void this.updateHTML(id, state, command);\n                } else {\n                    await this.stateService.setState(id, state.val as string, true);\n                }\n            }\n        }\n    }\n\n    /**\n     * @param obj If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === \"object\" && obj.message) {\n            try {\n                this.log.debug(`obj: ${JSON.stringify(obj)}`);\n                switch (obj.command) {\n                    case \"getActiv\":\n                        if (obj && obj.message && obj.message.schedule != null) {\n                            void this.loadData(obj, 1);\n                        } else {\n                            this.sendTo(obj.from, obj.command, `false`, obj.callback);\n                        }\n                        break;\n                    case \"getNameSchedule\":\n                        if (obj && obj.message && obj.message.schedule != null) {\n                            void this.loadData(obj, 4);\n                        } else {\n                            this.sendTo(obj.from, obj.command, `New Schedule`, obj.callback);\n                        }\n                        break;\n                    case \"getCountSchedule\":\n                        if (obj && obj.message && obj.message.schedule != null) {\n                            void this.loadData(obj, 3);\n                        } else {\n                            this.sendTo(obj.from, obj.command, `0`, obj.callback);\n                        }\n                        break;\n                    case \"getIdNameSchedule\":\n                        if (obj && obj.message && obj.message.schedule != null) {\n                            void this.loadData(obj, 2);\n                        } else {\n                            this.sendTo(\n                                obj.from,\n                                obj.command,\n                                `schedule-switcher.0.onoff.<set after restart>.data`,\n                                obj.callback,\n                            );\n                        }\n                        break;\n                    case \"add-trigger\":\n                    case \"add-one-time-trigger\":\n                    case \"update-one-time-trigger\":\n                    case \"update-trigger\":\n                    case \"delete-trigger\":\n                    case \"change-name\":\n                    case \"enable-schedule\":\n                    case \"disable-schedule\":\n                    case \"change-switched-values\":\n                    case \"change-switched-ids\":\n                    case \"change-view-dataId\":\n                    case \"change-active\":\n                        if (this.messageService) {\n                            if (obj.message && obj.message.parameter && obj.command === \"add-trigger\" && obj.callback) {\n                                void this.addNewTrigger(obj);\n                                return;\n                            }\n                            if (obj.message && obj.message.parameter) {\n                                obj.message = obj.message.parameter;\n                            }\n                            await this.messageService.handleMessage(obj);\n                        } else {\n                            this.log.error(\"Message service not initialized\");\n                        }\n                        break;\n                    case \"week\":\n                    case \"astro\":\n                    case \"datetime\":\n                    case \"time\":\n                    case \"valueCheck\":\n                        void this.changeTrigger(obj);\n                        break;\n                    default:\n                        this.log.error(`Message service ${obj.command} not initialized`);\n                }\n            } catch (e) {\n                this.logError(e as Error);\n                this.log.error(`Could not handle message:`);\n            }\n        }\n    }\n\n    private async updateHTML(id: string, state: ioBroker.State | null | undefined, command: string): Promise<void> {\n        await this.vishtmltable.changeHTML(command, state);\n        if (state) {\n            await this.setState(id, { val: state.val, ack: true });\n        }\n    }\n\n    private async updateData(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        this.log.debug(\"is schedule id start\");\n        await this.vishtmltable.changeTrigger(id, state);\n        if (state) {\n            await this.onScheduleChange(id, state.val as string);\n        }\n        this.log.debug(\"is schedule id end\");\n    }\n\n    private async updateEnabled(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        this.log.debug(\"is enabled id start\");\n        await this.vishtmltable.changeEnabled(id, state);\n        const dataId = this.getScheduleIdFromEnabledId(id);\n        const scheduleData = (await this.getStateAsync(dataId))?.val;\n        await this.onScheduleChange(dataId, scheduleData as string);\n        this.log.debug(\"is enabled id end\");\n    }\n\n    private async updateValidation(id: string): Promise<void> {\n        await this.validation?.setNextTime();\n        await this.vishtmltable.updateHTML();\n        await this.setState(id, false, true);\n    }\n\n    private async changeTrigger(obj: ioBroker.Message): Promise<void> {\n        let valueTrigger: ioBroker.State | null | undefined;\n        if (obj.message.dataid) {\n            valueTrigger = await this.getStateAsync(obj.message.dataid);\n        } else {\n            this.log.warn(`Missing dataId ${JSON.stringify(obj.message)}`);\n            return;\n        }\n        switch (obj.command) {\n            case \"week\":\n                if (valueTrigger && typeof valueTrigger.val === \"string\") {\n                    const triggers = JSON.parse(valueTrigger.val);\n                    const trigger = triggers.triggers.find((t: any) => t.id === obj.message.triggerid);\n                    if (trigger) {\n                        if (trigger.weekdays.includes(obj.message.changeid)) {\n                            trigger.weekdays = trigger.weekdays.filter((t: any) => t !== obj.message.changeid);\n                        } else {\n                            trigger.weekdays.push(obj.message.changeid);\n                            trigger.weekdays.sort((a: any, b: any) => a - b);\n                            if (trigger.weekdays.includes(0)) {\n                                trigger.weekdays.shift();\n                                trigger.weekdays.push(0);\n                            }\n                        }\n                        if (this.messageService) {\n                            const data = {\n                                dataId: obj.message.dataid,\n                                trigger: trigger,\n                            };\n                            obj.command = \"update-trigger\";\n                            obj.message = data;\n                            await this.messageService.handleMessage(obj);\n                            valueTrigger.val = JSON.stringify(triggers);\n                            void this.vishtmltable.changeTrigger(obj.message.dataId, valueTrigger);\n                        } else {\n                            this.log.error(\"Message service not initialized\");\n                        }\n                    } else {\n                        this.log.warn(`Missing trigger ${JSON.stringify(obj.message)} - ${valueTrigger.val}`);\n                    }\n                } else {\n                    this.log.warn(`Missing dataId ${JSON.stringify(obj.message)}`);\n                }\n                break;\n            case \"astro\":\n                if (valueTrigger && typeof valueTrigger.val === \"string\") {\n                    const triggers = JSON.parse(valueTrigger.val);\n                    const trigger = triggers.triggers.find((t: any) => t.id === obj.message.triggerid);\n                    if (trigger) {\n                        trigger.astroTime = obj.message.astrotime;\n                        trigger.shiftInMinutes = obj.message.shift;\n                        if (this.messageService) {\n                            const data = {\n                                dataId: obj.message.dataid,\n                                trigger: trigger,\n                            };\n                            obj.command = \"update-trigger\";\n                            obj.message = data;\n                            await this.messageService.handleMessage(obj);\n                            valueTrigger.val = JSON.stringify(triggers);\n                            void this.vishtmltable.changeTrigger(obj.message.dataId, valueTrigger);\n                        } else {\n                            this.log.error(\"Message service not initialized\");\n                        }\n                    } else {\n                        this.log.warn(`Missing trigger ${JSON.stringify(obj.message)} - ${valueTrigger.val}`);\n                    }\n                } else {\n                    this.log.warn(`Missing dataId ${JSON.stringify(obj.message)}`);\n                }\n                break;\n            case \"datetime\":\n                if (valueTrigger && typeof valueTrigger.val === \"string\") {\n                    const triggers = JSON.parse(valueTrigger.val);\n                    const trigger = triggers.triggers.find((t: any) => t.id === obj.message.triggerid);\n                    if (trigger) {\n                        trigger.date = new Date(obj.message.time).toISOString();\n                        if (this.messageService) {\n                            const data = {\n                                dataId: obj.message.dataid,\n                                trigger: trigger,\n                            };\n                            obj.command = \"add-one-time-trigger\";\n                            obj.message = data;\n                            await this.messageService.handleMessage(obj);\n                            valueTrigger.val = JSON.stringify(triggers);\n                            void this.vishtmltable.changeTrigger(obj.message.dataId, valueTrigger);\n                        } else {\n                            this.log.error(\"Message service not initialized\");\n                        }\n                    } else {\n                        this.log.warn(`Missing trigger ${JSON.stringify(obj.message)} - ${valueTrigger.val}`);\n                    }\n                } else {\n                    this.log.warn(`Missing dataId ${JSON.stringify(obj.message)}`);\n                }\n                break;\n            case \"time\":\n                if (valueTrigger && typeof valueTrigger.val === \"string\") {\n                    const triggers = JSON.parse(valueTrigger.val);\n                    const trigger = triggers.triggers.find((t: any) => t.id === obj.message.triggerid);\n                    if (trigger) {\n                        const splittime = obj.message.time.split(\":\");\n                        trigger.hour = parseFloat(splittime[0]);\n                        trigger.minute = parseFloat(splittime[1]);\n                        if (this.messageService) {\n                            const data = {\n                                dataId: obj.message.dataid,\n                                trigger: trigger,\n                            };\n                            obj.command = \"update-trigger\";\n                            obj.message = data;\n                            await this.messageService.handleMessage(obj);\n                            valueTrigger.val = JSON.stringify(triggers);\n                            void this.vishtmltable.changeTrigger(obj.message.dataId, valueTrigger);\n                        } else {\n                            this.log.error(\"Message service not initialized\");\n                        }\n                    } else {\n                        this.log.warn(`Missing trigger ${JSON.stringify(obj.message)} - ${valueTrigger.val}`);\n                    }\n                } else {\n                    this.log.warn(`Missing dataId ${JSON.stringify(obj.message)}`);\n                }\n                break;\n            case \"valueCheck\":\n                if (valueTrigger && typeof valueTrigger.val === \"string\") {\n                    const triggers = JSON.parse(valueTrigger.val);\n                    const trigger = triggers.triggers.find((t: any) => t.id === obj.message.triggerid);\n                    if (trigger) {\n                        trigger.valueCheck = obj.message.changeval ? false : true;\n                        if (this.messageService) {\n                            const data = {\n                                dataId: obj.message.dataid,\n                                trigger: trigger,\n                            };\n                            this.log.error(JSON.stringify(data));\n                            obj.command = \"update-trigger\";\n                            obj.message = data;\n                            await this.messageService.handleMessage(obj);\n                            valueTrigger.val = JSON.stringify(triggers);\n                            void this.vishtmltable.changeTrigger(obj.message.dataId, valueTrigger);\n                        } else {\n                            this.log.error(\"Message service not initialized\");\n                        }\n                    } else {\n                        this.log.warn(`Missing trigger ${JSON.stringify(obj.message)} - ${valueTrigger.val}`);\n                    }\n                } else {\n                    this.log.warn(`Missing dataId ${JSON.stringify(obj.message)}`);\n                }\n                break;\n            default:\n                this.log.error(`HTML message service ${obj.command} not initialized`);\n        }\n    }\n\n    private async loadData(obj: ioBroker.Message, answer: number): Promise<void> {\n        const id = obj.message.schedule;\n        const check = await this.getStateAsync(`schedule-switcher.0.onoff.${id}.data`);\n        if (check && check.val) {\n            if (answer === 1) {\n                const enabled = await this.getStateAsync(`schedule-switcher.0.onoff.${id}.enabled`);\n                if (enabled && enabled.val != null) {\n                    this.sendTo(obj.from, obj.command, enabled.val.toString(), obj.callback);\n                }\n            } else if (answer === 2) {\n                this.sendTo(obj.from, obj.command, `schedule-switcher.0.onoff.${id}.data`, obj.callback);\n            } else if (answer === 3) {\n                if (typeof check.val === \"string\") {\n                    const json = JSON.parse(check.val);\n                    this.sendTo(obj.from, obj.command, `${json.triggers.length}`, obj.callback);\n                }\n            } else if (answer === 4) {\n                if (typeof check.val === \"string\") {\n                    const json = JSON.parse(check.val);\n                    this.sendTo(obj.from, obj.command, `${json.name}`, obj.callback);\n                }\n            }\n        }\n    }\n\n    private async addNewTrigger(obj: ioBroker.Message): Promise<void> {\n        obj.message = obj.message.parameter;\n        const data = await this.getStateAsync(obj.message.dataId);\n        const data_json = data && typeof data.val === \"string\" ? JSON.parse(data.val) : null;\n        if (data_json && this.messageService) {\n            this.sendTo(obj.from, obj.command, data_json.triggers.length, obj.callback);\n            await this.messageService.handleMessage(obj);\n        } else {\n            this.sendTo(obj.from, obj.command, null, obj.callback);\n        }\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Private helper methods\n    //------------------------------------------------------------------------------------------------------------------\n\n    private async checkValueAttribute(): Promise<void> {\n        const record = await this.getStatesAsync(`schedule-switcher.${this.instance}.*`);\n        for (const id in record) {\n            if (id.toString().indexOf(\".data\") !== -1) {\n                const state = record[id];\n                if (state) {\n                    if (typeof state.val === \"string\" && state.val.startsWith(\"{\")) {\n                        const triggers = JSON.parse(state.val);\n                        if (triggers && triggers.triggers && triggers.triggers.length > 0) {\n                            let isSave = false;\n                            for (const trigger of triggers.triggers) {\n                                if (trigger.valueCheck == null) {\n                                    trigger.valueCheck = false;\n                                    isSave = true;\n                                }\n                            }\n                            if (isSave) {\n                                await this.setState(id, { val: JSON.stringify(triggers), ack: true });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private async initValidation(): Promise<void> {\n        this.validation = new IoBrokerValidationState(this, await this.getCoordinate());\n    }\n\n    private async initMessageService(): Promise<void> {\n        this.messageService = new MessageService(\n            this.stateService,\n            this.scheduleIdToSchedule,\n            this.createNewOnOffScheduleSerializer.bind(this),\n            this,\n            await this.getCoordinate(),\n            this.validation,\n            this.vishtmltable,\n        );\n    }\n\n    private async fixStateStructure(statesInSettings: { onOff: number[] }): Promise<void> {\n        if (!statesInSettings) {\n            statesInSettings = { onOff: [] };\n        }\n        if (!statesInSettings.onOff) {\n            statesInSettings.onOff = [];\n        }\n        const prefix = `schedule-switcher.${this.instance}.`;\n        const currentStates = await this.getStatesAsync(`${prefix}*.data`);\n        for (const fullId in currentStates) {\n            const split = fullId.split(\".\");\n            const type = split[2];\n            const id = Number.parseInt(split[3], 10);\n            if (type == \"onoff\") {\n                if (statesInSettings.onOff.includes(id)) {\n                    statesInSettings.onOff = statesInSettings.onOff.filter(i => i !== id);\n                    this.log.debug(`Found state ${fullId}`);\n                } else {\n                    this.log.debug(`Deleting state ${fullId}`);\n                    await this.deleteOnOffSchedule(id);\n                }\n            }\n        }\n        for (const i of statesInSettings.onOff) {\n            this.log.debug(`Onoff state ${i} not found, creating`);\n            await this.createOnOffSchedule(i);\n        }\n    }\n\n    private async deleteOnOffSchedule(id: number): Promise<void> {\n        await this.delObjectAsync(`onoff.${id.toString()}`, { recursive: true });\n    }\n\n    private async createOnOffSchedule(id: number): Promise<void> {\n        await this.setObjectNotExistsAsync(\"onoff\", {\n            type: \"device\",\n            common: {\n                name: \"onoff\",\n                desc: \"Created by Adapter\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}`, {\n            type: \"channel\",\n            common: {\n                name: \"New Schedule\",\n                desc: \"Created by Adapter\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}.data`, {\n            type: \"state\",\n            common: {\n                name: \"New Schedule\",\n                read: true,\n                write: true,\n                type: \"string\",\n                role: \"json\",\n                def: `{\n                    \"type\": \"OnOffSchedule\",\n                    \"name\": \"New Schedule\",\n                    \"active\": false,\n                    \"objectID\": ${id},\n                    \"onAction\": {\n                        \"type\":\"OnOffStateAction\",\n                        \"valueType\":\"boolean\",\n                        \"onValue\":true,\n                        \"offValue\":false,\n                        \"booleanValue\":true,\n                        \"idsOfStatesToSet\":[\"default.state\"]\n                        },\n                    \"offAction\": {\n                        \"type\":\"OnOffStateAction\",\n                        \"valueType\":\"boolean\",\n                        \"onValue\":true,\n                        \"offValue\":false,\n                        \"booleanValue\":false,\n                        \"idsOfStatesToSet\":[\"default.state\"]\n                    },\n                    \"triggers\":[]\n                }`.replace(/\\s/g, \"\"),\n                desc: \"Contains the schedule data (triggers, etc.)\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}.views`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"Created widgets\",\n                    de: \"Erstellte Widgets\",\n                    ru: \"\u0421\u043E\u0437\u0434\u0430\u043D\u043D\u044B\u0435 \u0432\u0438\u0434\u0436\u0435\u0442\u044B\",\n                    pt: \"Widgets criados\",\n                    nl: \"Aangemaakte widgets\",\n                    fr: \"Cr\u00E9ation de widgets\",\n                    it: \"Widget creati\",\n                    es: \"Widgets creados\",\n                    pl: \"Tworzone wid\u017Cety\",\n                    uk: \"\u0421\u0442\u0432\u043E\u0440\u0435\u043D\u0456 \u0432\u0456\u0434\u0436\u0435\u0442\u0438\",\n                    \"zh-cn\": \"\u521B\u5EFA\u90E8\u4EF6\",\n                },\n                read: true,\n                write: false,\n                type: \"string\",\n                role: \"json\",\n                def: `{}`,\n                desc: \"Contains all widgets\",\n            },\n            native: {},\n        });\n        await this.setObjectNotExistsAsync(`onoff.${id.toString()}.enabled`, {\n            type: \"state\",\n            common: {\n                name: {\n                    en: \"enable/disable\",\n                    de: \"aktivieren/deaktivieren\",\n                    ru: \"\u0432\u043A\u043B\u044E\u0447\u0438\u0442\u044C/\u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\",\n                    pt: \"ativar/desativar\",\n                    nl: \"inschakelen/uitschakelen\",\n                    fr: \"activer/d\u00E9sactiver\",\n                    it: \"abilitare/disabilitare\",\n                    es: \"habilitar/deshabilitar\",\n                    pl: \"w\u0142\u0105czy\u0107/wy\u0142\u0105czy\u0107\",\n                    uk: \"\u0443\u0432\u0456\u043C\u043A\u043D\u0443\u0442\u0438/\u0432\u0438\u043C\u043A\u043D\u0443\u0442\u0438\",\n                    \"zh-cn\": \"\u542F\u7528/\u7981\u7528\",\n                },\n                read: true,\n                write: true,\n                type: \"boolean\",\n                role: \"switch\",\n                def: false,\n                desc: \"Enables/disables automatic switching for this schedule\",\n            },\n            native: {},\n        });\n    }\n\n    private async onScheduleChange(id: string, scheduleString: string): Promise<void> {\n        this.log.debug(`onScheduleChange: ${scheduleString} ${id}`);\n        if (this.scheduleIdToSchedule.get(id)) {\n            this.log.debug(`schedule found: ${this.scheduleIdToSchedule.get(id)?.getName()}`);\n        }\n        try {\n            const schedule = (await this.createNewOnOffScheduleSerializer(id)).deserialize(scheduleString);\n            this.first = true;\n            const enabledState = await this.getStateAsync(this.getEnabledIdFromScheduleId(id));\n            if (enabledState) {\n                this.scheduleIdToSchedule.get(id)?.destroy();\n                schedule.setEnabled(enabledState.val as boolean);\n                this.scheduleIdToSchedule.set(id, schedule);\n            } else {\n                this.log.error(`Could not retrieve state enabled state for ${id}`);\n            }\n        } catch (e) {\n            this.logError(e as Error);\n        }\n    }\n\n    private async getCoordinate(): Promise<Coordinate> {\n        const obj = await this.getForeignObjectAsync(\"system.config\");\n        if (obj && obj.common && obj.common.latitude && obj.common.longitude) {\n            const lat = obj.common.latitude;\n            const long = obj.common.longitude;\n            this.log.debug(`Got coordinates lat=${lat} long=${long}`);\n            return new Coordinate(lat, long, this);\n        }\n        this.log.error(\"Could not read coordinates from system.config, using Berlins coordinates as fallback\");\n        return new Coordinate(52, 13, this);\n    }\n\n    private logError(error: Error): void {\n        this.log.error(error.stack || `${error.name}: ${error.message}`);\n    }\n\n    private async createNewOnOffScheduleSerializer(dataId: string): Promise<OnOffScheduleSerializer> {\n        const actionSerializer = new UniversalSerializer<Action>(\n            [new OnOffStateActionSerializer(this.stateService)],\n            this.loggingService,\n        );\n        actionSerializer.useSerializer(\n            new ConditionActionSerializer(\n                new UniversalSerializer<Condition>(\n                    [\n                        new StringStateAndConstantConditionSerializer(this.stateService),\n                        new StringStateAndStateConditionSerializer(this.stateService),\n                    ],\n                    this.loggingService,\n                ),\n                actionSerializer,\n                this,\n            ),\n        );\n        const triggerSerializer = new UniversalSerializer<Trigger>(\n            [\n                new TimeTriggerSerializer(actionSerializer),\n                new AstroTriggerSerializer(actionSerializer),\n                new OneTimeTriggerSerializer(actionSerializer, async (triggerId: string) => {\n                    await this.messageService?.handleMessage({\n                        message: {\n                            dataId: dataId,\n                            triggerId: triggerId,\n                        },\n                        command: \"delete-trigger\",\n                        from: this.namespace,\n                    } as any as ioBroker.Message);\n                }),\n            ],\n            this.loggingService,\n        );\n        return new OnOffScheduleSerializer(\n            new UniversalTriggerScheduler(\n                [\n                    new TimeTriggerScheduler(this.stateService, scheduleJob, cancelJob, this.loggingService),\n                    new AstroTriggerScheduler(\n                        new TimeTriggerScheduler(this.stateService, scheduleJob, cancelJob, this.loggingService),\n                        getTimes,\n                        await this.getCoordinate(),\n                        this.loggingService,\n                        this.stateService,\n                        this.first,\n                    ),\n                    new OneTimeTriggerScheduler(scheduleJob, cancelJob, this.loggingService, this),\n                ],\n                this.loggingService,\n            ),\n            actionSerializer,\n            triggerSerializer,\n            this,\n            this.loggingService,\n        );\n    }\n\n    private async setSendTo(data: string): Promise<void> {\n        const send = JSON.parse(data);\n        this.log.debug(JSON.stringify(send));\n        try {\n            if (\n                send.command === \"week\" ||\n                send.command === \"astro\" ||\n                send.command === \"datetime\" ||\n                send.command === \"time\"\n            ) {\n                await this.changeTrigger(send);\n                return;\n            }\n            if (this.messageService) {\n                await this.messageService.handleMessage(send);\n            } else {\n                this.log.error(\"Message service not initialized\");\n            }\n        } catch (e) {\n            this.logError(e as Error);\n            this.log.error(`Could not handle message:`);\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new ScheduleSwitcher(options);\n} else {\n    // otherwise start the instance directly\n    (() => new ScheduleSwitcher())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,2BAAuD;AACvD,qBAAyB;AAGzB,wBAA2B;AAC3B,0BAA6B;AAC7B,mCAAsC;AACtC,qCAAwC;AACxC,kCAAqC;AACrC,uCAA0C;AAE1C,oCAAuC;AACvC,uCAA0C;AAC1C,uDAA0D;AAC1D,oDAAuD;AACvD,sCAAyC;AACzC,qCAAwC;AACxC,wCAA2C;AAC3C,mCAAsC;AACtC,iCAAoC;AACpC,oCAAuC;AACvC,kCAAqC;AACrC,qCAAwC;AACxC,4BAA+B;AAU/B,MAAM,yBAAyB,MAAM,QAAQ;AAAA,EACjC,uBAA8C,oBAAI,IAAsB;AAAA,EACxE,iBAAiB,IAAI,qDAAuB,IAAI;AAAA,EAChD,eAAe,IAAI,iDAAqB,IAAI;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAe,IAAI,iCAAa,IAAI;AAAA,EACpC,QAAiB;AAAA,EAClB;AAAA,EAEA,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAEpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAC1C,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,uBAAuB;AAAA,EAChC;AAAA,EAEQ,2BAA2B,YAA4B;AAC3D,WAAO,WAAW,QAAQ,QAAQ,SAAS;AAAA,EAC/C;AAAA,EAEQ,2BAA2B,YAA4B;AAC3D,WAAO,WAAW,QAAQ,WAAW,MAAM;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAyB;AAjF3C;AAkFQ,QAAI,CAAC,KAAK,OAAO,SAAS;AACtB,YAAM,KAAK,eAAe,QAAQ,EAAE,WAAW,KAAK,CAAC;AAAA,IACzD;AACA,UAAM,KAAK,oBAAoB;AAC/B,UAAM,MAAM,MAAM,KAAK,sBAAsB,eAAe;AAC5D,QAAI,OAAO;AACX,QAAI,OAAO,IAAI,UAAU,IAAI,OAAO,UAAU;AAC1C,aAAO,IAAI,OAAO;AAAA,IACtB;AACA,QAAI,KAAK,OAAO,SAAS;AACrB,YAAM,KAAK,aAAa,aAAa,IAAI;AAAA,IAC7C;AACA,SAAK,OAAO,UAAU,QAAQ,MAAM,KAAK,YAAY,KAAK,OAAO,aAAqC;AACtG,SAAK,IAAI,MAAM,UAAU,KAAK,UAAU,KAAK,OAAO,UAAU,KAAK,CAAC,EAAE;AACtE,UAAM,KAAK,eAAe;AAC1B,UAAM,KAAK,mBAAmB;AAC9B,UAAM,KAAK,kBAAkB,KAAK,OAAO,SAAS;AAClD,YAAM,UAAK,eAAL,mBAAiB,eAAe,MAAM,0BAA0B;AACtE,YAAM,UAAK,eAAL,mBAAiB;AACvB,YAAM,UAAK,eAAL,mBAAiB;AACvB,UAAM,SAAS,MAAM,KAAK,eAAe,qBAAqB,KAAK,QAAQ,IAAI;AAC/E,eAAW,MAAM,QAAQ;AACrB,UAAI,GAAG,SAAS,EAAE,QAAQ,OAAO,MAAM,IAAI;AACvC,cAAM,QAAQ,OAAO,EAAE;AACvB,cAAM,KAAK,aAAa,cAAc,IAAI,OAAO,KAAK;AACtD,aAAK,IAAI,MAAM,cAAc,QAAQ,KAAK,UAAU,KAAK,IAAI,MAAM,aAAa,EAAE,EAAE;AACpF,YAAI,OAAO;AACP,eAAK,IAAI,KAAK,OAAO,EAAE,EAAE;AACzB,cAAI,OAAO,MAAM,QAAQ,YAAY,MAAM,IAAI,WAAW,GAAG,GAAG;AAC5D,kBAAM,WAAW,KAAK,MAAM,MAAM,GAAG;AACrC,gBAAI,YAAY,SAAS,UAAU,MAAM;AACrC,uBAAS,SAAS;AAClB,oBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,UAAU,QAAQ,GAAG,KAAK,KAAK,CAAC;AAAA,YACxE;AACA,oBAAM,UAAK,eAAL,mBAAiB,WAAW,IAAI,UAAU;AAChD,gBAAI,OAAO,aAAa,YAAY,OAAO,KAAK,QAAQ,EAAE,SAAS,GAAG;AAClE,oBAAM,KAAK,iBAAiB,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA,YAC5D,OAAO;AACH,mBAAK,IAAI,MAAM,WAAW,EAAE,mBAAmB;AAAA,YACnD;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,MAAM,gCAAgC,EAAE,EAAE;AAAA,UACvD;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,MAAM,gCAAgC,EAAE,EAAE;AAAA,QACvD;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,KAAK,iBAAiB;AAC5B,UAAM,KAAK,kBAAkB;AAC7B,UAAM,KAAK,aAAa,WAAW;AACnC,SAAK,gBAAgB,GAAG;AACxB,SAAK,gBAAgB,KAAK;AAAA,MACtB,YAAY;AAvIxB,YAAAA;AAwIgB,gBAAMA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,eAAe,MAAM,0BAA0B;AAAA,MAC1E;AAAA,MACA,KAAK,KAAK,MAAO;AAAA,IACrB;AACA,SAAK,uBAAuB,KAAK,WAAW,YAAY;AA5IhE,UAAAA;AA6IY,cAAMA,MAAA,KAAK,mBAAL,gBAAAA,IAAqB;AAC3B,WAAK,uBAAuB;AAC5B,WAAK,SAAS;AAAA,IAClB,GAAG,GAAI;AAAA,EACX;AAAA,EAEA,MAAc,SAAS,UAAqC;AAnJhE;AAoJQ,SAAK,IAAI,KAAK,2BAA2B;AACzC,SAAK,iBAAiB,KAAK,cAAc,KAAK,aAAa;AAC3D,SAAK,wBAAwB,KAAK,aAAa,KAAK,oBAAoB;AACxE,eAAW,MAAM,KAAK,qBAAqB,KAAK,GAAG;AAC/C,UAAI;AACA,mBAAK,qBAAqB,IAAI,EAAE,MAAhC,mBAAmC;AAAA,MACvC,SAAS,GAAG;AACR,aAAK,SAAS,CAAU;AACxB,aAAK,IAAI,MAAM,uBAAuB;AAAA,MAC1C;AAAA,IACJ;AACA,QAAI;AACA,WAAK,qBAAqB,MAAM;AAAA,IACpC,SAAS,GAAG;AACR,WAAK,SAAS,CAAU;AACxB,WAAK,IAAI,MAAM,6BAA6B;AAAA,IAChD;AACA,YAAM,UAAK,kBAAL,mBAAoB;AAC1B,YAAM,UAAK,mBAAL,mBAAqB;AAC3B,YAAM,UAAK,mBAAL,mBAAqB;AAC3B,UAAM,KAAK,aAAa,QAAQ;AAChC,aAAS;AAAA,EACb;AAAA,EAEA,MAAc,mBAAkC;AAC5C,UAAM,OAAO,IAAI,oCAAe;AAChC,SAAK,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACrC,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,oBAAgB,kCAAY,MAAM,YAAY;AAjL3D;AAkLY,WAAK,IAAI,KAAK,yBAAyB;AACvC,cAAM,UAAK,eAAL,mBAAiB;AAAA,IAC3B,CAAC;AACD,SAAK,SAAS;AACd,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EAEA,MAAc,oBAAmC;AAC7C,UAAM,OAAO,IAAI,oCAAe;AAChC,SAAK,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACrC,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,qBAAiB,kCAAY,MAAM,YAAY;AA9L5D;AA+LY,WAAK,IAAI,KAAK,gCAAgC;AAC9C,cAAM,UAAK,eAAL,mBAAiB;AAAA,IAC3B,CAAC;AACD,SAAK,SAAS;AACd,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EAEQ,WAAiB;AAtM7B;AAuMQ,eAAW,MAAM,KAAK,qBAAqB,KAAK,GAAG;AAC/C,iBAAK,qBAAqB,IAAI,EAAE,MAAhC,mBAAmC;AAAA,IACvC;AAAA,EACJ;AAAA,EAEA,MAAc,YAAY,QAA4C;AAClE,QAAI,UAAU,OAAO,SAAS,GAAG;AAC7B,YAAM,SAAmB,CAAC;AAC1B,iBAAW,SAAS,QAAQ;AACxB,YAAI,SAAS,MAAM,WAAW,MAAM;AAChC,cAAI,CAAC,OAAO,SAAS,MAAM,OAAO,GAAG;AACjC,mBAAO,KAAK,MAAM,OAAO;AAAA,UAC7B,OAAO;AACH,kBAAM,UAAU;AAChB,iBAAK,IAAI,MAAM,kCAAkC;AAAA,UACrD;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW;AACf,iBAAW,SAAS,QAAQ;AACxB,YAAI,QAAQ;AACZ,YAAI,MAAM,WAAW,MAAM;AACvB,gBAAM,SAAiB,MAAM,KAAK,OAAO,QAAQ,CAAC;AAClD,gBAAM,UAAU;AAChB,iBAAO,KAAK,MAAM;AAClB,kBAAQ;AACR,qBAAW;AAAA,QACf,OAAO;AACH,kBAAQ,MAAM;AAAA,QAClB;AACA,cAAM,QAAQ,MAAM,KAAK,cAAc,6BAA6B,KAAK,OAAO;AAChF,cAAM,UAAU,MAAM,KAAK,cAAc,6BAA6B,KAAK,UAAU;AACrF,YAAI,SAAS,MAAM,OAAO,QAAQ,OAAO,MAAM,QAAQ,UAAU;AAC7D,gBAAM,OAAO,KAAK,MAAM,MAAM,GAAG;AACjC,gBAAM,QAAQ,KAAK,SAAS;AAC5B,gBAAM,WAAW,6BAA6B,KAAK;AACnD,gBAAM,aAAa,KAAK;AAAA,QAC5B;AACA,YAAI,WAAW,QAAQ,OAAO,MAAM;AAChC,gBAAM,SAAS,QAAQ,IAAI,SAAS;AAAA,QACxC;AAAA,MACJ;AAKA,UAAI,UAAU;AACV,aAAK,IAAI;AAAA,UACL,2CAA2C,KAAK,UAAU,MAAM,CAAC,MAAM,KAAK,UAAU,MAAM,CAAC;AAAA,QACjG;AACA,cAAM,KAAK,yBAAyB,kBAAkB,KAAK,SAAS,IAAI;AAAA,UACpE,QAAQ,EAAE,eAAe,QAAQ,WAAW,EAAE,OAAO,OAAO,EAAE;AAAA,QAClE,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEQ,OAAO,KAAe,OAAgC;AAC1D,UAAM,kBAAkB,CAAC,QAA4B;AACjD,aAAO,IAAI,OAAO,CAAC,MAAM,UAAU,IAAI,QAAQ,IAAI,MAAM,KAAK;AAAA,IAClE;AACA,QAAI,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AACxB,oBAAgB,GAAG,EAAE,MAAM,OAAK;AAC5B,UAAI,UAAU,GAAG;AACb,gBAAQ,IAAI;AACZ,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AACD,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,MAAc,cAAc,IAAY,OAAyD;AAC7F,QAAI,OAAO;AACP,UAAI,CAAC,MAAM,KAAK;AACZ,cAAM,UAAU,GAAG,MAAM,GAAG,EAAE,IAAI;AAClC,YAAI,YAAY,QAAQ;AACpB,eAAK,KAAK,WAAW,IAAI,KAAK;AAAA,QAClC,WAAW,YAAY,WAAW;AAC9B,eAAK,KAAK,cAAc,IAAI,KAAK;AAAA,QACrC,WAAW,YAAY,YAAY,OAAO,MAAM,QAAQ,UAAU;AAC9D,eAAK,IAAI,MAAM,cAAc;AAC7B,eAAK,KAAK,UAAU,MAAM,GAAG;AAAA,QACjC,WAAW,YAAY,YAAY,MAAM,KAAK;AAC1C,eAAK,KAAK,iBAAiB,EAAE;AAC7B;AAAA,QACJ;AACA,cAAM,WAAW,GAAG,MAAM,GAAG,EAAE,GAAG,MAAM,GAAG,EAAE,SAAS,CAAC;AACvD,YACI,aAAa,UACb,OAAO,YAAY,YACnB,WAAW,eACX,WAAW,UACb;AACE,eAAK,KAAK,WAAW,IAAI,OAAO,OAAO;AAAA,QAC3C,OAAO;AACH,gBAAM,KAAK,aAAa,SAAS,IAAI,MAAM,KAAe,IAAI;AAAA,QAClE;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,UAAU,KAAsC;AAC1D,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AACxC,UAAI;AACA,aAAK,IAAI,MAAM,QAAQ,KAAK,UAAU,GAAG,CAAC,EAAE;AAC5C,gBAAQ,IAAI,SAAS;AAAA,UACjB,KAAK;AACD,gBAAI,OAAO,IAAI,WAAW,IAAI,QAAQ,YAAY,MAAM;AACpD,mBAAK,KAAK,SAAS,KAAK,CAAC;AAAA,YAC7B,OAAO;AACH,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,SAAS,IAAI,QAAQ;AAAA,YAC5D;AACA;AAAA,UACJ,KAAK;AACD,gBAAI,OAAO,IAAI,WAAW,IAAI,QAAQ,YAAY,MAAM;AACpD,mBAAK,KAAK,SAAS,KAAK,CAAC;AAAA,YAC7B,OAAO;AACH,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,gBAAgB,IAAI,QAAQ;AAAA,YACnE;AACA;AAAA,UACJ,KAAK;AACD,gBAAI,OAAO,IAAI,WAAW,IAAI,QAAQ,YAAY,MAAM;AACpD,mBAAK,KAAK,SAAS,KAAK,CAAC;AAAA,YAC7B,OAAO;AACH,mBAAK,OAAO,IAAI,MAAM,IAAI,SAAS,KAAK,IAAI,QAAQ;AAAA,YACxD;AACA;AAAA,UACJ,KAAK;AACD,gBAAI,OAAO,IAAI,WAAW,IAAI,QAAQ,YAAY,MAAM;AACpD,mBAAK,KAAK,SAAS,KAAK,CAAC;AAAA,YAC7B,OAAO;AACH,mBAAK;AAAA,gBACD,IAAI;AAAA,gBACJ,IAAI;AAAA,gBACJ;AAAA,gBACA,IAAI;AAAA,cACR;AAAA,YACJ;AACA;AAAA,UACJ,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACD,gBAAI,KAAK,gBAAgB;AACrB,kBAAI,IAAI,WAAW,IAAI,QAAQ,aAAa,IAAI,YAAY,iBAAiB,IAAI,UAAU;AACvF,qBAAK,KAAK,cAAc,GAAG;AAC3B;AAAA,cACJ;AACA,kBAAI,IAAI,WAAW,IAAI,QAAQ,WAAW;AACtC,oBAAI,UAAU,IAAI,QAAQ;AAAA,cAC9B;AACA,oBAAM,KAAK,eAAe,cAAc,GAAG;AAAA,YAC/C,OAAO;AACH,mBAAK,IAAI,MAAM,iCAAiC;AAAA,YACpD;AACA;AAAA,UACJ,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AACD,iBAAK,KAAK,cAAc,GAAG;AAC3B;AAAA,UACJ;AACI,iBAAK,IAAI,MAAM,mBAAmB,IAAI,OAAO,kBAAkB;AAAA,QACvE;AAAA,MACJ,SAAS,GAAG;AACR,aAAK,SAAS,CAAU;AACxB,aAAK,IAAI,MAAM,2BAA2B;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,WAAW,IAAY,OAA0C,SAAgC;AAC3G,UAAM,KAAK,aAAa,WAAW,SAAS,KAAK;AACjD,QAAI,OAAO;AACP,YAAM,KAAK,SAAS,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK,KAAK,CAAC;AAAA,IACzD;AAAA,EACJ;AAAA,EAEA,MAAc,WAAW,IAAY,OAAyD;AAC1F,SAAK,IAAI,MAAM,sBAAsB;AACrC,UAAM,KAAK,aAAa,cAAc,IAAI,KAAK;AAC/C,QAAI,OAAO;AACP,YAAM,KAAK,iBAAiB,IAAI,MAAM,GAAa;AAAA,IACvD;AACA,SAAK,IAAI,MAAM,oBAAoB;AAAA,EACvC;AAAA,EAEA,MAAc,cAAc,IAAY,OAAyD;AAnarG;AAoaQ,SAAK,IAAI,MAAM,qBAAqB;AACpC,UAAM,KAAK,aAAa,cAAc,IAAI,KAAK;AAC/C,UAAM,SAAS,KAAK,2BAA2B,EAAE;AACjD,UAAM,gBAAgB,WAAM,KAAK,cAAc,MAAM,MAA/B,mBAAmC;AACzD,UAAM,KAAK,iBAAiB,QAAQ,YAAsB;AAC1D,SAAK,IAAI,MAAM,mBAAmB;AAAA,EACtC;AAAA,EAEA,MAAc,iBAAiB,IAA2B;AA5a9D;AA6aQ,YAAM,UAAK,eAAL,mBAAiB;AACvB,UAAM,KAAK,aAAa,WAAW;AACnC,UAAM,KAAK,SAAS,IAAI,OAAO,IAAI;AAAA,EACvC;AAAA,EAEA,MAAc,cAAc,KAAsC;AAC9D,QAAI;AACJ,QAAI,IAAI,QAAQ,QAAQ;AACpB,qBAAe,MAAM,KAAK,cAAc,IAAI,QAAQ,MAAM;AAAA,IAC9D,OAAO;AACH,WAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,OAAO,CAAC,EAAE;AAC7D;AAAA,IACJ;AACA,YAAQ,IAAI,SAAS;AAAA,MACjB,KAAK;AACD,YAAI,gBAAgB,OAAO,aAAa,QAAQ,UAAU;AACtD,gBAAM,WAAW,KAAK,MAAM,aAAa,GAAG;AAC5C,gBAAM,UAAU,SAAS,SAAS,KAAK,CAAC,MAAW,EAAE,OAAO,IAAI,QAAQ,SAAS;AACjF,cAAI,SAAS;AACT,gBAAI,QAAQ,SAAS,SAAS,IAAI,QAAQ,QAAQ,GAAG;AACjD,sBAAQ,WAAW,QAAQ,SAAS,OAAO,CAAC,MAAW,MAAM,IAAI,QAAQ,QAAQ;AAAA,YACrF,OAAO;AACH,sBAAQ,SAAS,KAAK,IAAI,QAAQ,QAAQ;AAC1C,sBAAQ,SAAS,KAAK,CAAC,GAAQ,MAAW,IAAI,CAAC;AAC/C,kBAAI,QAAQ,SAAS,SAAS,CAAC,GAAG;AAC9B,wBAAQ,SAAS,MAAM;AACvB,wBAAQ,SAAS,KAAK,CAAC;AAAA,cAC3B;AAAA,YACJ;AACA,gBAAI,KAAK,gBAAgB;AACrB,oBAAM,OAAO;AAAA,gBACT,QAAQ,IAAI,QAAQ;AAAA,gBACpB;AAAA,cACJ;AACA,kBAAI,UAAU;AACd,kBAAI,UAAU;AACd,oBAAM,KAAK,eAAe,cAAc,GAAG;AAC3C,2BAAa,MAAM,KAAK,UAAU,QAAQ;AAC1C,mBAAK,KAAK,aAAa,cAAc,IAAI,QAAQ,QAAQ,YAAY;AAAA,YACzE,OAAO;AACH,mBAAK,IAAI,MAAM,iCAAiC;AAAA,YACpD;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,mBAAmB,KAAK,UAAU,IAAI,OAAO,CAAC,MAAM,aAAa,GAAG,EAAE;AAAA,UACxF;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,OAAO,CAAC,EAAE;AAAA,QACjE;AACA;AAAA,MACJ,KAAK;AACD,YAAI,gBAAgB,OAAO,aAAa,QAAQ,UAAU;AACtD,gBAAM,WAAW,KAAK,MAAM,aAAa,GAAG;AAC5C,gBAAM,UAAU,SAAS,SAAS,KAAK,CAAC,MAAW,EAAE,OAAO,IAAI,QAAQ,SAAS;AACjF,cAAI,SAAS;AACT,oBAAQ,YAAY,IAAI,QAAQ;AAChC,oBAAQ,iBAAiB,IAAI,QAAQ;AACrC,gBAAI,KAAK,gBAAgB;AACrB,oBAAM,OAAO;AAAA,gBACT,QAAQ,IAAI,QAAQ;AAAA,gBACpB;AAAA,cACJ;AACA,kBAAI,UAAU;AACd,kBAAI,UAAU;AACd,oBAAM,KAAK,eAAe,cAAc,GAAG;AAC3C,2BAAa,MAAM,KAAK,UAAU,QAAQ;AAC1C,mBAAK,KAAK,aAAa,cAAc,IAAI,QAAQ,QAAQ,YAAY;AAAA,YACzE,OAAO;AACH,mBAAK,IAAI,MAAM,iCAAiC;AAAA,YACpD;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,mBAAmB,KAAK,UAAU,IAAI,OAAO,CAAC,MAAM,aAAa,GAAG,EAAE;AAAA,UACxF;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,OAAO,CAAC,EAAE;AAAA,QACjE;AACA;AAAA,MACJ,KAAK;AACD,YAAI,gBAAgB,OAAO,aAAa,QAAQ,UAAU;AACtD,gBAAM,WAAW,KAAK,MAAM,aAAa,GAAG;AAC5C,gBAAM,UAAU,SAAS,SAAS,KAAK,CAAC,MAAW,EAAE,OAAO,IAAI,QAAQ,SAAS;AACjF,cAAI,SAAS;AACT,oBAAQ,OAAO,IAAI,KAAK,IAAI,QAAQ,IAAI,EAAE,YAAY;AACtD,gBAAI,KAAK,gBAAgB;AACrB,oBAAM,OAAO;AAAA,gBACT,QAAQ,IAAI,QAAQ;AAAA,gBACpB;AAAA,cACJ;AACA,kBAAI,UAAU;AACd,kBAAI,UAAU;AACd,oBAAM,KAAK,eAAe,cAAc,GAAG;AAC3C,2BAAa,MAAM,KAAK,UAAU,QAAQ;AAC1C,mBAAK,KAAK,aAAa,cAAc,IAAI,QAAQ,QAAQ,YAAY;AAAA,YACzE,OAAO;AACH,mBAAK,IAAI,MAAM,iCAAiC;AAAA,YACpD;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,mBAAmB,KAAK,UAAU,IAAI,OAAO,CAAC,MAAM,aAAa,GAAG,EAAE;AAAA,UACxF;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,OAAO,CAAC,EAAE;AAAA,QACjE;AACA;AAAA,MACJ,KAAK;AACD,YAAI,gBAAgB,OAAO,aAAa,QAAQ,UAAU;AACtD,gBAAM,WAAW,KAAK,MAAM,aAAa,GAAG;AAC5C,gBAAM,UAAU,SAAS,SAAS,KAAK,CAAC,MAAW,EAAE,OAAO,IAAI,QAAQ,SAAS;AACjF,cAAI,SAAS;AACT,kBAAM,YAAY,IAAI,QAAQ,KAAK,MAAM,GAAG;AAC5C,oBAAQ,OAAO,WAAW,UAAU,CAAC,CAAC;AACtC,oBAAQ,SAAS,WAAW,UAAU,CAAC,CAAC;AACxC,gBAAI,KAAK,gBAAgB;AACrB,oBAAM,OAAO;AAAA,gBACT,QAAQ,IAAI,QAAQ;AAAA,gBACpB;AAAA,cACJ;AACA,kBAAI,UAAU;AACd,kBAAI,UAAU;AACd,oBAAM,KAAK,eAAe,cAAc,GAAG;AAC3C,2BAAa,MAAM,KAAK,UAAU,QAAQ;AAC1C,mBAAK,KAAK,aAAa,cAAc,IAAI,QAAQ,QAAQ,YAAY;AAAA,YACzE,OAAO;AACH,mBAAK,IAAI,MAAM,iCAAiC;AAAA,YACpD;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,mBAAmB,KAAK,UAAU,IAAI,OAAO,CAAC,MAAM,aAAa,GAAG,EAAE;AAAA,UACxF;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,OAAO,CAAC,EAAE;AAAA,QACjE;AACA;AAAA,MACJ,KAAK;AACD,YAAI,gBAAgB,OAAO,aAAa,QAAQ,UAAU;AACtD,gBAAM,WAAW,KAAK,MAAM,aAAa,GAAG;AAC5C,gBAAM,UAAU,SAAS,SAAS,KAAK,CAAC,MAAW,EAAE,OAAO,IAAI,QAAQ,SAAS;AACjF,cAAI,SAAS;AACT,oBAAQ,aAAa,IAAI,QAAQ,YAAY,QAAQ;AACrD,gBAAI,KAAK,gBAAgB;AACrB,oBAAM,OAAO;AAAA,gBACT,QAAQ,IAAI,QAAQ;AAAA,gBACpB;AAAA,cACJ;AACA,mBAAK,IAAI,MAAM,KAAK,UAAU,IAAI,CAAC;AACnC,kBAAI,UAAU;AACd,kBAAI,UAAU;AACd,oBAAM,KAAK,eAAe,cAAc,GAAG;AAC3C,2BAAa,MAAM,KAAK,UAAU,QAAQ;AAC1C,mBAAK,KAAK,aAAa,cAAc,IAAI,QAAQ,QAAQ,YAAY;AAAA,YACzE,OAAO;AACH,mBAAK,IAAI,MAAM,iCAAiC;AAAA,YACpD;AAAA,UACJ,OAAO;AACH,iBAAK,IAAI,KAAK,mBAAmB,KAAK,UAAU,IAAI,OAAO,CAAC,MAAM,aAAa,GAAG,EAAE;AAAA,UACxF;AAAA,QACJ,OAAO;AACH,eAAK,IAAI,KAAK,kBAAkB,KAAK,UAAU,IAAI,OAAO,CAAC,EAAE;AAAA,QACjE;AACA;AAAA,MACJ;AACI,aAAK,IAAI,MAAM,wBAAwB,IAAI,OAAO,kBAAkB;AAAA,IAC5E;AAAA,EACJ;AAAA,EAEA,MAAc,SAAS,KAAuB,QAA+B;AACzE,UAAM,KAAK,IAAI,QAAQ;AACvB,UAAM,QAAQ,MAAM,KAAK,cAAc,6BAA6B,EAAE,OAAO;AAC7E,QAAI,SAAS,MAAM,KAAK;AACpB,UAAI,WAAW,GAAG;AACd,cAAM,UAAU,MAAM,KAAK,cAAc,6BAA6B,EAAE,UAAU;AAClF,YAAI,WAAW,QAAQ,OAAO,MAAM;AAChC,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,QAAQ,IAAI,SAAS,GAAG,IAAI,QAAQ;AAAA,QAC3E;AAAA,MACJ,WAAW,WAAW,GAAG;AACrB,aAAK,OAAO,IAAI,MAAM,IAAI,SAAS,6BAA6B,EAAE,SAAS,IAAI,QAAQ;AAAA,MAC3F,WAAW,WAAW,GAAG;AACrB,YAAI,OAAO,MAAM,QAAQ,UAAU;AAC/B,gBAAM,OAAO,KAAK,MAAM,MAAM,GAAG;AACjC,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,GAAG,KAAK,SAAS,MAAM,IAAI,IAAI,QAAQ;AAAA,QAC9E;AAAA,MACJ,WAAW,WAAW,GAAG;AACrB,YAAI,OAAO,MAAM,QAAQ,UAAU;AAC/B,gBAAM,OAAO,KAAK,MAAM,MAAM,GAAG;AACjC,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,GAAG,KAAK,IAAI,IAAI,IAAI,QAAQ;AAAA,QACnE;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,cAAc,KAAsC;AAC9D,QAAI,UAAU,IAAI,QAAQ;AAC1B,UAAM,OAAO,MAAM,KAAK,cAAc,IAAI,QAAQ,MAAM;AACxD,UAAM,YAAY,QAAQ,OAAO,KAAK,QAAQ,WAAW,KAAK,MAAM,KAAK,GAAG,IAAI;AAChF,QAAI,aAAa,KAAK,gBAAgB;AAClC,WAAK,OAAO,IAAI,MAAM,IAAI,SAAS,UAAU,SAAS,QAAQ,IAAI,QAAQ;AAC1E,YAAM,KAAK,eAAe,cAAc,GAAG;AAAA,IAC/C,OAAO;AACH,WAAK,OAAO,IAAI,MAAM,IAAI,SAAS,MAAM,IAAI,QAAQ;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,sBAAqC;AAC/C,UAAM,SAAS,MAAM,KAAK,eAAe,qBAAqB,KAAK,QAAQ,IAAI;AAC/E,eAAW,MAAM,QAAQ;AACrB,UAAI,GAAG,SAAS,EAAE,QAAQ,OAAO,MAAM,IAAI;AACvC,cAAM,QAAQ,OAAO,EAAE;AACvB,YAAI,OAAO;AACP,cAAI,OAAO,MAAM,QAAQ,YAAY,MAAM,IAAI,WAAW,GAAG,GAAG;AAC5D,kBAAM,WAAW,KAAK,MAAM,MAAM,GAAG;AACrC,gBAAI,YAAY,SAAS,YAAY,SAAS,SAAS,SAAS,GAAG;AAC/D,kBAAI,SAAS;AACb,yBAAW,WAAW,SAAS,UAAU;AACrC,oBAAI,QAAQ,cAAc,MAAM;AAC5B,0BAAQ,aAAa;AACrB,2BAAS;AAAA,gBACb;AAAA,cACJ;AACA,kBAAI,QAAQ;AACR,sBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,UAAU,QAAQ,GAAG,KAAK,KAAK,CAAC;AAAA,cACxE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,iBAAgC;AAC1C,SAAK,aAAa,IAAI,uDAAwB,MAAM,MAAM,KAAK,cAAc,CAAC;AAAA,EAClF;AAAA,EAEA,MAAc,qBAAoC;AAC9C,SAAK,iBAAiB,IAAI;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK,iCAAiC,KAAK,IAAI;AAAA,MAC/C;AAAA,MACA,MAAM,KAAK,cAAc;AAAA,MACzB,KAAK;AAAA,MACL,KAAK;AAAA,IACT;AAAA,EACJ;AAAA,EAEA,MAAc,kBAAkB,kBAAsD;AAClF,QAAI,CAAC,kBAAkB;AACnB,yBAAmB,EAAE,OAAO,CAAC,EAAE;AAAA,IACnC;AACA,QAAI,CAAC,iBAAiB,OAAO;AACzB,uBAAiB,QAAQ,CAAC;AAAA,IAC9B;AACA,UAAM,SAAS,qBAAqB,KAAK,QAAQ;AACjD,UAAM,gBAAgB,MAAM,KAAK,eAAe,GAAG,MAAM,QAAQ;AACjE,eAAW,UAAU,eAAe;AAChC,YAAM,QAAQ,OAAO,MAAM,GAAG;AAC9B,YAAM,OAAO,MAAM,CAAC;AACpB,YAAM,KAAK,OAAO,SAAS,MAAM,CAAC,GAAG,EAAE;AACvC,UAAI,QAAQ,SAAS;AACjB,YAAI,iBAAiB,MAAM,SAAS,EAAE,GAAG;AACrC,2BAAiB,QAAQ,iBAAiB,MAAM,OAAO,OAAK,MAAM,EAAE;AACpE,eAAK,IAAI,MAAM,eAAe,MAAM,EAAE;AAAA,QAC1C,OAAO;AACH,eAAK,IAAI,MAAM,kBAAkB,MAAM,EAAE;AACzC,gBAAM,KAAK,oBAAoB,EAAE;AAAA,QACrC;AAAA,MACJ;AAAA,IACJ;AACA,eAAW,KAAK,iBAAiB,OAAO;AACpC,WAAK,IAAI,MAAM,eAAe,CAAC,sBAAsB;AACrD,YAAM,KAAK,oBAAoB,CAAC;AAAA,IACpC;AAAA,EACJ;AAAA,EAEA,MAAc,oBAAoB,IAA2B;AACzD,UAAM,KAAK,eAAe,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,WAAW,KAAK,CAAC;AAAA,EAC3E;AAAA,EAEA,MAAc,oBAAoB,IAA2B;AACzD,UAAM,KAAK,wBAAwB,SAAS;AAAA,MACxC,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,UAAM,KAAK,wBAAwB,SAAS,GAAG,SAAS,CAAC,IAAI;AAAA,MACzD,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,UAAM,KAAK,wBAAwB,SAAS,GAAG,SAAS,CAAC,SAAS;AAAA,MAC9D,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA;AAAA;AAAA;AAAA,kCAIa,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAkBjB,QAAQ,OAAO,EAAE;AAAA,QACpB,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,UAAM,KAAK,wBAAwB,SAAS,GAAG,SAAS,CAAC,UAAU;AAAA,MAC/D,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,SAAS;AAAA,QACb;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AACD,UAAM,KAAK,wBAAwB,SAAS,GAAG,SAAS,CAAC,YAAY;AAAA,MACjE,MAAM;AAAA,MACN,QAAQ;AAAA,QACJ,MAAM;AAAA,UACF,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,SAAS;AAAA,QACb;AAAA,QACA,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK;AAAA,QACL,MAAM;AAAA,MACV;AAAA,MACA,QAAQ,CAAC;AAAA,IACb,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,iBAAiB,IAAY,gBAAuC;AA3yBtF;AA4yBQ,SAAK,IAAI,MAAM,qBAAqB,cAAc,IAAI,EAAE,EAAE;AAC1D,QAAI,KAAK,qBAAqB,IAAI,EAAE,GAAG;AACnC,WAAK,IAAI,MAAM,oBAAmB,UAAK,qBAAqB,IAAI,EAAE,MAAhC,mBAAmC,SAAS,EAAE;AAAA,IACpF;AACA,QAAI;AACA,YAAM,YAAY,MAAM,KAAK,iCAAiC,EAAE,GAAG,YAAY,cAAc;AAC7F,WAAK,QAAQ;AACb,YAAM,eAAe,MAAM,KAAK,cAAc,KAAK,2BAA2B,EAAE,CAAC;AACjF,UAAI,cAAc;AACd,mBAAK,qBAAqB,IAAI,EAAE,MAAhC,mBAAmC;AACnC,iBAAS,WAAW,aAAa,GAAc;AAC/C,aAAK,qBAAqB,IAAI,IAAI,QAAQ;AAAA,MAC9C,OAAO;AACH,aAAK,IAAI,MAAM,8CAA8C,EAAE,EAAE;AAAA,MACrE;AAAA,IACJ,SAAS,GAAG;AACR,WAAK,SAAS,CAAU;AAAA,IAC5B;AAAA,EACJ;AAAA,EAEA,MAAc,gBAAqC;AAC/C,UAAM,MAAM,MAAM,KAAK,sBAAsB,eAAe;AAC5D,QAAI,OAAO,IAAI,UAAU,IAAI,OAAO,YAAY,IAAI,OAAO,WAAW;AAClE,YAAM,MAAM,IAAI,OAAO;AACvB,YAAM,OAAO,IAAI,OAAO;AACxB,WAAK,IAAI,MAAM,uBAAuB,GAAG,SAAS,IAAI,EAAE;AACxD,aAAO,IAAI,6BAAW,KAAK,MAAM,IAAI;AAAA,IACzC;AACA,SAAK,IAAI,MAAM,sFAAsF;AACrG,WAAO,IAAI,6BAAW,IAAI,IAAI,IAAI;AAAA,EACtC;AAAA,EAEQ,SAAS,OAAoB;AACjC,SAAK,IAAI,MAAM,MAAM,SAAS,GAAG,MAAM,IAAI,KAAK,MAAM,OAAO,EAAE;AAAA,EACnE;AAAA,EAEA,MAAc,iCAAiC,QAAkD;AAC7F,UAAM,mBAAmB,IAAI;AAAA,MACzB,CAAC,IAAI,6DAA2B,KAAK,YAAY,CAAC;AAAA,MAClD,KAAK;AAAA,IACT;AACA,qBAAiB;AAAA,MACb,IAAI;AAAA,QACA,IAAI;AAAA,UACA;AAAA,YACI,IAAI,2FAA0C,KAAK,YAAY;AAAA,YAC/D,IAAI,qFAAuC,KAAK,YAAY;AAAA,UAChE;AAAA,UACA,KAAK;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,oBAAoB,IAAI;AAAA,MAC1B;AAAA,QACI,IAAI,mDAAsB,gBAAgB;AAAA,QAC1C,IAAI,qDAAuB,gBAAgB;AAAA,QAC3C,IAAI,yDAAyB,kBAAkB,OAAO,cAAsB;AAt2B5F;AAu2BoB,kBAAM,UAAK,mBAAL,mBAAqB,cAAc;AAAA,YACrC,SAAS;AAAA,cACL;AAAA,cACA;AAAA,YACJ;AAAA,YACA,SAAS;AAAA,YACT,MAAM,KAAK;AAAA,UACf;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,MACA,KAAK;AAAA,IACT;AACA,WAAO,IAAI;AAAA,MACP,IAAI;AAAA,QACA;AAAA,UACI,IAAI,iDAAqB,KAAK,cAAc,kCAAa,gCAAW,KAAK,cAAc;AAAA,UACvF,IAAI;AAAA,YACA,IAAI,iDAAqB,KAAK,cAAc,kCAAa,gCAAW,KAAK,cAAc;AAAA,YACvF;AAAA,YACA,MAAM,KAAK,cAAc;AAAA,YACzB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,UACT;AAAA,UACA,IAAI,uDAAwB,kCAAa,gCAAW,KAAK,gBAAgB,IAAI;AAAA,QACjF;AAAA,QACA,KAAK;AAAA,MACT;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,IACT;AAAA,EACJ;AAAA,EAEA,MAAc,UAAU,MAA6B;AACjD,UAAM,OAAO,KAAK,MAAM,IAAI;AAC5B,SAAK,IAAI,MAAM,KAAK,UAAU,IAAI,CAAC;AACnC,QAAI;AACA,UACI,KAAK,YAAY,UACjB,KAAK,YAAY,WACjB,KAAK,YAAY,cACjB,KAAK,YAAY,QACnB;AACE,cAAM,KAAK,cAAc,IAAI;AAC7B;AAAA,MACJ;AACA,UAAI,KAAK,gBAAgB;AACrB,cAAM,KAAK,eAAe,cAAc,IAAI;AAAA,MAChD,OAAO;AACH,aAAK,IAAI,MAAM,iCAAiC;AAAA,MACpD;AAAA,IACJ,SAAS,GAAG;AACR,WAAK,SAAS,CAAU;AACxB,WAAK,IAAI,MAAM,2BAA2B;AAAA,IAC9C;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,iBAAiB,OAAO;AACzG,OAAO;AAEH,GAAC,MAAM,IAAI,iBAAiB,GAAG;AACnC;",
  "names": ["_a"]
}
