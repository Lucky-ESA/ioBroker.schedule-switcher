{
  "version": 3,
  "sources": ["../../src/actions/OnOffStateAction.ts"],
  "sourcesContent": ["import type { StateService } from \"../services/StateService\";\nimport { BaseStateAction } from \"./BaseStateAction\";\n\n/**\n * OnOffStateAction\n */\nexport class OnOffStateAction<T extends string | number | boolean> extends BaseStateAction {\n    private idsOfStatesToSet: string[];\n    private readonly onValue: T;\n    private readonly offValue: T;\n    private readonly booleanValue: boolean;\n    private readonly valueType: string;\n\n    /**\n     * @param idsOfStatesToSet States\n     * @param onValue on\n     * @param offValue off\n     * @param booleanValue Value\n     * @param stateService State\n     * @param valueType Type\n     */\n    constructor(\n        idsOfStatesToSet: string[],\n        onValue: T,\n        offValue: T,\n        booleanValue: boolean,\n        stateService: StateService,\n        valueType: string,\n    ) {\n        super(stateService);\n\n        this.checkIdsOfStates(idsOfStatesToSet);\n        if (onValue == undefined) {\n            throw new Error(\"OnValue may not be undefined.\");\n        }\n        if (offValue == undefined) {\n            throw new Error(\"OffValue may not be undefined.\");\n        }\n        if (booleanValue == null) {\n            throw new Error(\"ValueToSet may not be null or undefined.\");\n        }\n\n        this.idsOfStatesToSet = idsOfStatesToSet;\n        this.onValue = onValue;\n        this.offValue = offValue;\n        this.booleanValue = booleanValue;\n        this.valueType = valueType;\n    }\n\n    /**\n     * getIdsOfStatesToSet\n     */\n    public getIdsOfStatesToSet(): string[] {\n        return this.idsOfStatesToSet;\n    }\n\n    /**\n     * @param idsOfStatesToSet States\n     */\n    public setIdsOfStatesToSet(idsOfStatesToSet: string[]): void {\n        this.checkIdsOfStates(idsOfStatesToSet);\n        this.idsOfStatesToSet = idsOfStatesToSet;\n    }\n\n    /**\n     * getOnValue\n     */\n    public getOnValue(): T {\n        return this.onValue;\n    }\n\n    /**\n     * getOffValue\n     */\n    public getOffValue(): T {\n        return this.offValue;\n    }\n\n    /**\n     * getBooleanValue\n     */\n    public getBooleanValue(): boolean {\n        return this.booleanValue;\n    }\n\n    /**\n     * getValueType\n     */\n    public getValueType(): string {\n        return this.valueType;\n    }\n\n    /**\n     * @param trigger Trigger\n     */\n    public execute(trigger: any): void {\n        const valueToUse = this.getBooleanValue() ? this.getOnValue() : this.getOffValue();\n        this.getIdsOfStatesToSet().forEach(id => {\n            this.getStateService().setForeignState(id, valueToUse, trigger);\n        });\n    }\n\n    /**\n     * toBooleanValueType\n     */\n    public toBooleanValueType(): OnOffStateAction<boolean> {\n        return new OnOffStateAction(\n            this.getIdsOfStatesToSet(),\n            true,\n            false,\n            this.getBooleanValue(),\n            this.getStateService(),\n            this.getValueType(),\n        );\n    }\n\n    /**\n     * @param onValue on\n     * @param offValue off\n     */\n    public toStringValueType(onValue: string, offValue: string): OnOffStateAction<string> {\n        return new OnOffStateAction(\n            this.getIdsOfStatesToSet(),\n            onValue,\n            offValue,\n            this.getBooleanValue(),\n            this.getStateService(),\n            this.getValueType(),\n        );\n    }\n\n    /**\n     * @param onValue on\n     * @param offValue off\n     */\n    public toNumberValueType(onValue: number, offValue: number): OnOffStateAction<number> {\n        return new OnOffStateAction(\n            this.getIdsOfStatesToSet(),\n            onValue,\n            offValue,\n            this.getBooleanValue(),\n            this.getStateService(),\n            this.getValueType(),\n        );\n    }\n\n    private checkIdsOfStates(ids: string[]): void {\n        if (ids == null || ids.length == 0 || ids.includes(\"\")) {\n            throw new Error(\"IdsOfStatesToSet may not be null or empty.\");\n        }\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAAgC;AAKzB,MAAM,yBAA8D,uCAAgB;AAAA,EAC/E;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUjB,YACI,kBACA,SACA,UACA,cACA,cACA,WACF;AACE,UAAM,YAAY;AAElB,SAAK,iBAAiB,gBAAgB;AACtC,QAAI,WAAW,QAAW;AACtB,YAAM,IAAI,MAAM,+BAA+B;AAAA,IACnD;AACA,QAAI,YAAY,QAAW;AACvB,YAAM,IAAI,MAAM,gCAAgC;AAAA,IACpD;AACA,QAAI,gBAAgB,MAAM;AACtB,YAAM,IAAI,MAAM,0CAA0C;AAAA,IAC9D;AAEA,SAAK,mBAAmB;AACxB,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKO,sBAAgC;AACnC,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,oBAAoB,kBAAkC;AACzD,SAAK,iBAAiB,gBAAgB;AACtC,SAAK,mBAAmB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKO,aAAgB;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,cAAiB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,kBAA2B;AAC9B,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,eAAuB;AAC1B,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,QAAQ,SAAoB;AAC/B,UAAM,aAAa,KAAK,gBAAgB,IAAI,KAAK,WAAW,IAAI,KAAK,YAAY;AACjF,SAAK,oBAAoB,EAAE,QAAQ,QAAM;AACrC,WAAK,gBAAgB,EAAE,gBAAgB,IAAI,YAAY,OAAO;AAAA,IAClE,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKO,qBAAgD;AACnD,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AAAA,MACrB,KAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,kBAAkB,SAAiB,UAA4C;AAClF,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AAAA,MACrB,KAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,kBAAkB,SAAiB,UAA4C;AAClF,WAAO,IAAI;AAAA,MACP,KAAK,oBAAoB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,KAAK,gBAAgB;AAAA,MACrB,KAAK,gBAAgB;AAAA,MACrB,KAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA,EAEQ,iBAAiB,KAAqB;AAC1C,QAAI,OAAO,QAAQ,IAAI,UAAU,KAAK,IAAI,SAAS,EAAE,GAAG;AACpD,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AAAA,EACJ;AACJ;",
  "names": []
}
