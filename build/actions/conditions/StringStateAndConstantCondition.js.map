{
  "version": 3,
  "sources": ["../../../src/actions/conditions/StringStateAndConstantCondition.ts"],
  "sourcesContent": ["import type { StateService } from \"../../services/StateService\";\nimport type { Condition } from \"./Condition\";\nimport { EqualitySign } from \"./EqualitySign\";\n\n/**\n * StringStateAndConstantCondition\n */\nexport class StringStateAndConstantCondition implements Condition {\n    private readonly constant: string;\n    private readonly stateId: string;\n    private readonly stateService: StateService;\n    private readonly sign: EqualitySign;\n\n    /**\n     * @param constant Constant\n     * @param stateId ID\n     * @param sign Sign\n     * @param stateService setState\n     */\n    constructor(constant: string, stateId: string, sign: EqualitySign, stateService: StateService) {\n        if (constant == null) {\n            throw new Error(\"Constant value may not be null or undefined.\");\n        }\n        if (stateId == null || stateId.length === 0) {\n            throw new Error(\"State id may not be null, undefined or empty.\");\n        }\n        if (sign == null) {\n            throw new Error(\"Sign may not be null or undefined.\");\n        }\n        if (stateService == null) {\n            throw new Error(\"State service may not be null or undefined.\");\n        }\n        this.constant = constant;\n        this.stateId = stateId;\n        this.sign = sign;\n        this.stateService = stateService;\n    }\n\n    /**\n     * evaluate\n     */\n    public async evaluate(): Promise<boolean> {\n        const stateValue = String(await this.stateService.getForeignState(this.stateId));\n        let result: boolean;\n        if (this.sign == EqualitySign.NotEqual) {\n            result = stateValue !== this.constant;\n        } else {\n            result = stateValue === this.constant;\n        }\n        return Promise.resolve(result);\n    }\n\n    /**\n     * getConstant\n     */\n    public getConstant(): string {\n        return this.constant;\n    }\n\n    /**\n     * getStateId\n     */\n    public getStateId(): string {\n        return this.stateId;\n    }\n\n    /**\n     * getSign\n     */\n    public getSign(): EqualitySign {\n        return this.sign;\n    }\n\n    /**\n     * toString\n     */\n    public toString(): string {\n        return `${this.constant} ${this.sign} ${this.stateId}`;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,0BAA6B;AAKtB,MAAM,gCAAqD;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjB,YAAY,UAAkB,SAAiB,MAAoB,cAA4B;AAC3F,QAAI,YAAY,MAAM;AAClB,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AACA,QAAI,WAAW,QAAQ,QAAQ,WAAW,GAAG;AACzC,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACnE;AACA,QAAI,QAAQ,MAAM;AACd,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACxD;AACA,QAAI,gBAAgB,MAAM;AACtB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IACjE;AACA,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAa,WAA6B;AACtC,UAAM,aAAa,OAAO,MAAM,KAAK,aAAa,gBAAgB,KAAK,OAAO,CAAC;AAC/E,QAAI;AACJ,QAAI,KAAK,QAAQ,iCAAa,UAAU;AACpC,eAAS,eAAe,KAAK;AAAA,IACjC,OAAO;AACH,eAAS,eAAe,KAAK;AAAA,IACjC;AACA,WAAO,QAAQ,QAAQ,MAAM;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA,EAKO,cAAsB;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,aAAqB;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,UAAwB;AAC3B,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKO,WAAmB;AACtB,WAAO,GAAG,KAAK,QAAQ,IAAI,KAAK,IAAI,IAAI,KAAK,OAAO;AAAA,EACxD;AACJ;",
  "names": []
}
