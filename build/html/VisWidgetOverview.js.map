{
  "version": 3,
  "sources": ["../../src/html/VisWidgetOverview.ts"],
  "sourcesContent": ["import type { WidgetOverview } from \"./widgetOverview\";\n\n/**\n * VisWidgetOverview\n */\nexport class VisWidgetOverview implements WidgetOverview {\n    private adapter: ioBroker.Adapter;\n\n    /**\n     * @param adapter ioBroker\n     */\n    constructor(adapter: ioBroker.Adapter) {\n        this.adapter = adapter;\n    }\n\n    /**\n     * createOverview\n     */\n    public async createOverview(): Promise<void> {\n        this.adapter.log.debug(`Start update Widget overview!`);\n        const currentStates: any = await this.adapter.getStatesAsync(\n            `schedule-switcher.${this.adapter.instance}.onoff.*`,\n        );\n        let html_code = \"\";\n        let counter = 0;\n        for (const stateId in currentStates) {\n            if (stateId.toString().indexOf(\".view\") !== -1 && currentStates[stateId].val.startsWith(\"{\")) {\n                html_code += this.createHeader(stateId);\n                const val = JSON.parse(currentStates[stateId].val);\n                for (const vis in val) {\n                    for (const views in val[vis]) {\n                        for (const widget in val[vis][views]) {\n                            const json = val[vis][views][widget];\n                            ++counter;\n                            const isodd = counter % 2 != 0 ? \"#1E1E1E\" : \"#18171C\";\n                            html_code += this.createRow(isodd, json, vis, views, widget);\n                        }\n                    }\n                }\n            }\n        }\n        await this.createHTML(html_code, counter);\n    }\n\n    /**\n     * createHeader\n     *\n     * @param dataId Data Id\n     */\n    private createHeader(dataId: string): string {\n        return `\n            <tr style=\"background-color: #000000;\">\n                <td colspan=\"13\" scope=\"colgroup\">\n                <p style=\"color: #ffffff; font-family:\"Helvetica\"; \n                font-size:20px; font-weight:normal\">${dataId}</p></td>\n            </tr>`;\n    }\n\n    /**\n     * createHTML\n     *\n     * @param rows rows\n     * @param counter counter for footer\n     */\n    private async createHTML(rows: string, counter: number): Promise<void> {\n        const htmlStart = `\n        <title>Schedule-Switcher Widget Overview</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0\">\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n        <style>\n        * {\n            margin: 0;\n        }\n        body {\n            background-color: #000000; margin: 0 auto;\n        }\n        p {\n            padding-top: 10px; padding-bottom: 10px; text-align: center;\n        }\n        #updatetime:hover {\n            cursor: pointer;\n        }\n        td {\n            padding:6px; border:0px solid #424242; \n            border-right:1px solid #424242;\n            border-bottom:1px solid #424242;\n        }\n        table {\n            width: auto;\n            margin: center;\n            border:1px solid #424242;\n            border-spacing: 6px;\n            border-collapse: collapse;\n        }\n        div.container {\n            align-items: center;\n            justify-content: center;\n        }\n        thread {\n            display: table-header-group;\n        }\n        tbody {\n            display: table-row-group;\n        }\n        tfoot {\n            display: table-footer-group\n        }\n        </style>\n        <div class=\"container\">\n        <table style=\" width:auto;\n        border:2px; border-color: #424242; \n        font-size:15px; font-family:Helvetica; \n        background-image: linear-gradient(42deg, #BDBDBD, #BDBDBD);\">\n        <thead>\n        <tr>\n        <th colspan=\"13\" scope=\"colgroup\">\n        <p style=\"color: #ffffff; font-family:Helvetica; \n        font-size:20px; font-weight:normal\">Widget Value Overview</p></th>\n        </tr>\n        <tr style=\"color: #ffffff; height:35px;\n        font-size: 16px; font-weight: normal; \n        border-bottom: 3px solid #ffffff\">\n        <th title=\"VIS\" style=\"text-align: center; width:auto\">\n        VIS\n        </th>\n        <th title=\"View\" style=\"text-align:center; width:auto\">\n        View\n        </th>\n        <th title=\"Widget\" style=\"text-align:center; width:auto\">\n        Widget\n        </th>\n        <th title=\"Type\" style=\"text-align:center; width:auto\">\n        Type\n        </th>\n        <th title=\"Value off\" style=\"text-align:center; width:auto\">\n        Off\n        </th>\n        <th title=\"Value on\" style=\"text-align:center; width:auto\">\n        On\n        </th>\n        <th title=\"Name of 'off' replace\" style=\"text-align:center; width:auto\">\n        Replace Off\n        </th>\n        <th title=\"Name of 'on' replace\" style=\"text-align:center; width:auto\">\n        Replace On\n        </th>\n        <th title=\"Enabled ID\" style=\"text-align:center; width:auto\">\n        Enabled ID\n        </th>\n        <th title=\"State count\" style=\"text-align:center; width:auto\">\n        State count\n        </th>\n        <th title=\"Object-Id\" style=\"text-align:center; width:auto\">\n        Object-Id\n        </th>\n        <th title=\"Condition count\" style=\"text-align:center; width:auto\">\n        Condition count\n        </th>\n        <th title=\"Condition Object-Id\" style=\"text-align:center; width:auto\">\n        Object-Id\n        </th>\n        </tr>\n        </thead>\n        <tfoot>\n        <tr>\n        <th colspan=\"13\" scope=\"colgroup\">\n        <p style=\"color: #ffffff; font-family: Helvetica; \n        font-size:20px; font-weight: normal\">\n        Widgets total ${counter}\n        </p></th>\n        </tr>\n        </tfoot>\n        <tbody>\n        ${rows}\n        </tbody>\n        </table></div>`;\n        await this.adapter.setState(`widgetOverview`, {\n            val: htmlStart,\n            ack: true,\n        });\n    }\n\n    /**\n     * createRow\n     *\n     * @param isodd bg color\n     * @param json valus\n     * @param vis vis-2 or vis\n     * @param view view name\n     * @param widget widget id\n     */\n    private createRow(isodd: string, json: any, vis: string, view: string, widget: string): string {\n        let count = 0;\n        const countCondition = json.condition.length;\n        let stateCondition = \"\";\n        for (const id of json.condition) {\n            for (const val in id) {\n                ++count;\n                if (count == countCondition) {\n                    stateCondition += `${id[val]}`;\n                } else {\n                    stateCondition += `${id[val]}<br/>`;\n                }\n            }\n        }\n        count = 0;\n        const countStateId = json.condition.length;\n        let stateStateId = \"\";\n        for (const id of json.state) {\n            for (const val in id) {\n                ++count;\n                if (count == countStateId) {\n                    stateStateId += `${id[val]}`;\n                } else {\n                    stateStateId += `${id[val]}<br/>`;\n                }\n            }\n        }\n        const offValue = json.offValue ? json.offValue : \"empty\";\n        const onValue = json.onValue ? json.onValue : \"empty\";\n        const enabled = json.enabled ? json.enabled.replace(\"schedule-switcher.\", \"\") : \"empty\";\n        const newOff = json.newOff ? json.newOff : \"empty\";\n        const newOn = json.newOn ? json.newOn : \"empty\";\n        return `\n        <tr style=\"background-color:${isodd}; \n        color:yellow;\n        font-weight:\"bold\";\n        font-size:15px;\">\n            <td title=\"${vis}\" style=\"text-align:center\">${vis}</td>\n            <td title=\"${view}\" style=\"text-align:center\">${view}</td>\n            <td title=\"${widget}\" style=\"text-align:center\">${widget}</td>\n            <td title=\"${json.valueType}\" style=\"text-align:center\">${json.valueType}</td>\n            <td title=\"${offValue}\" style=\"text-align:center\">${offValue}</td>\n            <td title=\"${onValue}\" style=\"text-align:center\">${onValue}</td>\n            <td title=\"${newOff}\" style=\"text-align:center\">${newOff}</td>\n            <td title=\"${newOn}\" style=\"text-align:center\">${newOn}</td>\n            <td title=\"${enabled}\" style=\"text-align:center\">${enabled}</td>\n            <td title=\"${json.stateCount}\" style=\"text-align:center\">${json.stateCount}</td>\n            <td title=\"${stateStateId}\" style=\"text-align:center\">${stateStateId}</td>\n            <td title=\"${json.conditionCount}\" style=\"text-align:center\">${json.conditionCount}</td>\n            <td title=\"${stateCondition}\" style=\"text-align:center\">${stateCondition}</td>\n        </tr>`;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
