{
  "version": 3,
  "sources": ["../../src/services/IoBrokerStateService.ts"],
  "sourcesContent": ["import type { StateService } from \"./StateService\";\n\n/**\n * IoBrokerStateService\n */\nexport class IoBrokerStateService implements StateService {\n    private adapter: ioBroker.Adapter;\n    private delayTimeout: ioBroker.Timeout | undefined;\n    /**\n     * @param adapter ioBroker\n     * @param checkTime check\n     * @param mergeTime merge\n     */\n    constructor(\n        adapter: ioBroker.Adapter,\n        private checkTime: number = 0,\n        private mergeTime: number = 0,\n    ) {\n        if (!adapter) {\n            throw new Error(\"adapter may not be null.\");\n        }\n        this.adapter = adapter;\n        this.checkTime = Date.now();\n        this.mergeTime = 0;\n        this.delayTimeout = undefined;\n    }\n\n    /**\n     * @param id ID\n     * @param value Values\n     */\n    async extendObject(id: string, value: any): Promise<any> {\n        if (!id || !value) {\n            throw new Error(\"State or Object is empty! - extendObject\");\n        }\n        this.checkId(id);\n        await this.adapter.extendObject(id, value);\n    }\n\n    /**\n     * @param id ID\n     * @param value Values\n     * @param ack Ack flag\n     */\n    async setState(id: string, value: string | number | boolean, ack = true): Promise<any> {\n        this.checkId(id);\n        await this.adapter.setState(id, { val: value, ack: ack });\n    }\n\n    /**\n     * @param id ID\n     * @param value Values\n     * @param trigger Trigger\n     */\n    async setForeignState(id: string, value: string | number | boolean, trigger: any): Promise<any> {\n        this.adapter.log.debug(`TRIGGER SET: ${JSON.stringify(trigger)}`);\n        const diffTime = Date.now() - this.checkTime;\n        this.checkTime = Date.now();\n        this.adapter.log.debug(`DIFF: ${diffTime}`);\n        if (this.adapter.config.switch_delay > 0 && this.adapter.config.switch_delay > diffTime) {\n            this.adapter.log.debug(`Start Sleep`);\n            this.mergeTime += this.adapter.config.switch_delay;\n            await this.delay(this.mergeTime);\n        } else {\n            this.mergeTime = 0;\n        }\n        if (this.adapter.config.history > 0) {\n            await this.setHistory(id, value as string, trigger);\n        }\n        this.checkId(id);\n        this.adapter.log.debug(`Setting state ${id} with value ${value?.toString()}`);\n        this.adapter.setForeignState(id, value, false);\n    }\n\n    /**\n     * @param id ID\n     * @param value Values\n     * @param trigger Trigger\n     */\n    async setHistory(id: string, value: string | number | boolean, trigger: any): Promise<any> {\n        if (!trigger || trigger.id != null) {\n            let history_newvalue = [];\n            const history_value = await this.getState(`history`);\n            try {\n                if (history_value != null && typeof history_value == \"string\") {\n                    history_newvalue = JSON.parse(history_value);\n                } else {\n                    history_newvalue = [];\n                }\n            } catch {\n                history_newvalue = [];\n            }\n            if (Object.keys(history_newvalue).length > this.adapter.config.history) {\n                history_newvalue.pop();\n            }\n            const new_data = {\n                setObjectId: id,\n                objectId: trigger.objectId ? trigger.objectId : \"unknown\",\n                value: value.toString(),\n                trigger: trigger.trigger ? trigger.trigger : \"unknown\",\n                astroTime: trigger.astroTime ? trigger.astroTime : \"unknown\",\n                shift: trigger.shift ? trigger.shift : 0,\n                date: trigger.date ? trigger.date : 0,\n                hour: trigger.hour ? trigger.hour : 0,\n                minute: trigger.minute ? trigger.minute : 0,\n                weekdays: trigger.weekdays ? trigger.weekdays : [],\n                time: Date.now(),\n            };\n            history_newvalue.push(new_data);\n            history_newvalue.sort((a: any, b: any) => {\n                if (a.time > b.time) {\n                    return -1;\n                }\n            });\n            await this.setState(`history`, JSON.stringify(history_newvalue), true);\n        }\n    }\n\n    /**\n     * @param id ID\n     */\n    async getForeignState(id: string): Promise<any> {\n        return new Promise((resolve, _) => {\n            this.checkId(id);\n            void this.adapter.getForeignState(id, (err, state) => {\n                if (err || state == null) {\n                    this.adapter.log.error(`Requested state ${id} returned null/undefined!`);\n                }\n                resolve(state?.val);\n            });\n        });\n    }\n\n    /**\n     * @param id ID\n     */\n    async getState(id: string): Promise<any> {\n        return new Promise((resolve, _) => {\n            this.checkId(id);\n            this.adapter.getState(id, (err, state) => {\n                if (err || state == null) {\n                    this.adapter.log.error(`Requested getState ${id} returned null/undefined!`);\n                }\n                resolve(state?.val);\n            });\n        });\n    }\n\n    /**\n     * @param ms milliseconds\n     */\n    public delay(ms: number): Promise<void> {\n        return new Promise(resolve => {\n            this.delayTimeout = this.adapter.setTimeout(resolve, ms);\n        });\n    }\n\n    /**\n     * destroy all\n     */\n    public destroy(): Promise<boolean> {\n        this.delayTimeout && this.adapter.clearTimeout(this.delayTimeout);\n        this.delayTimeout = undefined;\n        return Promise.resolve(true);\n    }\n\n    private checkId(id: string): void {\n        if (id == null || id.length === 0) {\n            throw new Error(\"id may not be null or empty.\");\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
