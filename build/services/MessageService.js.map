{
  "version": 3,
  "sources": ["../../src/services/MessageService.ts"],
  "sourcesContent": ["import { getTimes } from \"suncalc\";\nimport { Coordinate } from \"../Coordinate\";\nimport { OnOffStateAction } from \"../actions/OnOffStateAction\";\nimport { OnOffSchedule } from \"../schedules/OnOffSchedule\";\nimport { Schedule } from \"../schedules/Schedule\";\nimport { OnOffScheduleSerializer } from \"../serialization/OnOffScheduleSerializer\";\nimport { AstroTime } from \"../triggers/AstroTime\";\nimport { AstroTriggerBuilder } from \"../triggers/AstroTriggerBuilder\";\nimport { DailyTriggerBuilder } from \"../triggers/DailyTriggerBuilder\";\nimport { TimeTriggerBuilder } from \"../triggers/TimeTriggerBuilder\";\nimport { Trigger } from \"../triggers/Trigger\";\nimport { AllWeekdays } from \"../triggers/Weekday\";\nimport { StateService } from \"./StateService\";\n\nexport class MessageService {\n    private currentMessage: ioBroker.Message | null = null;\n    private triggerTimeout: any;\n\n    constructor(\n        private stateService: StateService,\n        private scheduleIdToSchedule: Map<string, Schedule>,\n        private createOnOffScheduleSerializer: (dataId: string) => Promise<OnOffScheduleSerializer>,\n        private adapter: ioBroker.Adapter,\n        private readonly coordinate: Coordinate,\n    ) {\n        this.adapter = adapter;\n        this.triggerTimeout = undefined;\n    }\n\n    public async handleMessage(message: ioBroker.Message): Promise<void> {\n        if (this.currentMessage) {\n            this.triggerTimeout = this.adapter.setTimeout(() => {\n                this.handleMessage(message);\n                this.triggerTimeout = undefined;\n            }, 50);\n            return;\n        }\n        this.currentMessage = message;\n        const data: any = message.message;\n        if (message.command === \"change-view-dataId\") {\n            await this.updateViews(data);\n            this.adapter.log.debug(\"Finished message \" + message.command);\n            this.currentMessage = null;\n            return;\n        }\n        this.adapter.log.debug(`Received ${message.command}`);\n        this.adapter.log.debug(JSON.stringify(message.message));\n        const schedule = this.scheduleIdToSchedule.get(data.dataId);\n        if (!schedule) {\n            this.adapter.log.error(`No schedule found for state ${data.dataId}`);\n            this.currentMessage = null;\n            return;\n        }\n        switch (message.command) {\n            case \"add-trigger\":\n                await this.addTrigger(schedule, data);\n                break;\n            case \"add-one-time-trigger\":\n                await this.addOneTimeTrigger(schedule, data);\n                break;\n            case \"update-one-time-trigger\":\n                await this.updateOneTimeTrigger(schedule, JSON.stringify(data.trigger), data.dataId);\n                break;\n            case \"update-trigger\":\n                if (data.trigger && data.trigger.type === \"AstroTrigger\") {\n                    data.trigger.todayTrigger = await this.nextDate(data.trigger);\n                }\n                await this.updateTrigger(schedule, JSON.stringify(data.trigger), data.dataId);\n                break;\n            case \"delete-trigger\":\n                schedule.removeTrigger(data.triggerId);\n                break;\n            case \"change-name\":\n                schedule.setName(data.name);\n                this.changeName(data);\n                break;\n            case \"enable-schedule\":\n                schedule.setEnabled(true);\n                await this.stateService.setState(this.getEnabledIdFromScheduleId(data.dataId), true);\n                break;\n            case \"disable-schedule\":\n                schedule.setEnabled(false);\n                await this.stateService.setState(this.getEnabledIdFromScheduleId(data.dataId), false);\n                break;\n            case \"change-switched-values\":\n                this.changeOnOffSchedulesSwitchedValues(schedule, data);\n                break;\n            case \"change-switched-ids\":\n                this.changeOnOffSchedulesSwitchedIds(schedule, data.stateIds);\n                break;\n            default:\n                this.adapter.log.error(\"Unknown command received\");\n                this.currentMessage = null;\n                return;\n        }\n        if (schedule instanceof OnOffSchedule) {\n            this.stateService.setState(\n                data.dataId,\n                (await this.createOnOffScheduleSerializer(data.dataId)).serialize(schedule),\n            );\n        } else {\n            this.adapter.log.error(\"Cannot update schedule state after message, no serializer found for schedule\");\n            return;\n        }\n        this.adapter.log.debug(\"Finished message \" + message.command);\n        this.currentMessage = null;\n    }\n\n    private async changeName(data: any): Promise<void> {\n        const state = data?.dataId.split(\".\");\n        await this.stateService.extendObject(`onoff.${state[3]}`, { common: { name: data?.name } });\n        await this.stateService.extendObject(`onoff.${state[3]}.data`, { common: { name: data?.name } });\n    }\n\n    private getEnabledIdFromScheduleId(scheduleId: string): string {\n        return scheduleId.replace(\"data\", \"enabled\");\n    }\n\n    private async nextDate(data: any): Promise<any> {\n        const next = getTimes(new Date(), this.coordinate.getLatitude(), this.coordinate.getLongitude());\n        let astro: Date;\n        if (data.astroTime === \"sunset\") {\n            astro = next.sunset;\n        } else if (data.astroTime === \"sunrise\") {\n            astro = next.sunrise;\n        } else {\n            astro = next.solarNoon;\n        }\n        new Date(astro.getTime()).setMinutes(new Date(astro.getTime()).getMinutes() + data.shiftInMinutes);\n        return { hour: astro.getHours(), minute: astro.getMinutes(), weekday: astro.getDay(), date: astro };\n    }\n\n    private async addTrigger(schedule: Schedule, data: any): Promise<void> {\n        const state = data?.dataId.split(\".\");\n        let triggerBuilder: DailyTriggerBuilder;\n\n        if (data.triggerType === \"TimeTrigger\") {\n            this.adapter.log.debug(\"Wants TimeTrigger\");\n            triggerBuilder = new TimeTriggerBuilder().setHour(0).setMinute(0).setObjectId(parseInt(state[3]));\n        } else if (data.triggerType === \"AstroTrigger\") {\n            this.adapter.log.debug(\"Wants AstroTrigger\");\n            triggerBuilder = new AstroTriggerBuilder()\n                .setAstroTime(AstroTime.Sunrise)\n                .setShift(0)\n                .setObjectId(parseInt(state[3]))\n                .setTodayTrigger(await this.nextDate({ astroTime: \"sunrise\", shiftInMinutes: 0 }));\n        } else {\n            this.adapter.log.error(`Cannot add trigger of type ${data.triggerType}`);\n            return;\n        }\n\n        triggerBuilder.setWeekdays(AllWeekdays).setId(this.getNextTriggerId(schedule.getTriggers()));\n\n        if (data.actionType === \"OnOffStateAction\" && schedule instanceof OnOffSchedule) {\n            this.adapter.log.debug(\"Wants OnOffStateAction\");\n            triggerBuilder.setAction(schedule.getOnAction());\n        } else {\n            this.adapter.log.error(`Cannot add trigger with action of type ${data.actionType}`);\n            return;\n        }\n        schedule.addTrigger(triggerBuilder.build());\n    }\n\n    private async updateOneTimeTrigger(schedule: Schedule, triggerString: string, dataId: string): Promise<void> {\n        let updated;\n        if (schedule instanceof OnOffSchedule) {\n            updated = (await this.createOnOffScheduleSerializer(dataId))\n                .getTriggerSerializer(schedule)\n                .deserialize(triggerString);\n        } else {\n            this.adapter.log.error(`Can not deserialize trigger for schedule of type ${typeof schedule}`);\n            return;\n        }\n        schedule.updateTrigger(updated);\n    }\n\n    private async addOneTimeTrigger(schedule: Schedule, data: any): Promise<void> {\n        const t = JSON.parse(data.trigger);\n        const id = data.dataId.split(\".\");\n        t.id = this.getNextTriggerId(schedule.getTriggers());\n        t.objectId = parseInt(id[3]);\n        const trigger = (await this.createOnOffScheduleSerializer(data.dataId))\n            .getTriggerSerializer(schedule as OnOffSchedule)\n            .deserialize(JSON.stringify(t));\n        schedule.addTrigger(trigger);\n    }\n\n    private async updateTrigger(schedule: Schedule, triggerString: string, dataId: string): Promise<void> {\n        let updated;\n        if (schedule instanceof OnOffSchedule) {\n            updated = (await this.createOnOffScheduleSerializer(dataId))\n                .getTriggerSerializer(schedule)\n                .deserialize(triggerString);\n        } else {\n            this.adapter.log.error(`Can not deserialize trigger for schedule of type ${typeof schedule}`);\n            return;\n        }\n        schedule.updateTrigger(updated);\n    }\n\n    private async updateViews(data: any): Promise<void> {\n        if (data) {\n            if (data.newId && data.newId.endsWith(\".data\")) {\n                const path = `${data.newId.replace(\".data\", \".views\")}`;\n                const pathSplit = path.split(\".\");\n                const id = parseInt(pathSplit[3]);\n                if (!isNaN(id)) {\n                    const valView = await this.stateService.getState(path);\n                    if (valView != null) {\n                        const newView = typeof valView === \"string\" ? JSON.parse(valView) : valView;\n                        if (newView && newView[data.namespace] && newView[data.namespace][data.prefix]) {\n                            newView[data.namespace][data.prefix][data.widgetId] = data;\n                        } else {\n                            newView[data.namespace] = {};\n                            newView[data.namespace][data.prefix] = {};\n                            newView[data.namespace][data.prefix][data.widgetId] = data;\n                        }\n                        this.stateService.setState(path, JSON.stringify(newView));\n                    }\n                }\n            }\n            if (data.oldId && data.oldId.endsWith(\".data\")) {\n                const oldPath = `${data.oldId.replace(\".data\", \".views\")}`;\n                const oldPathSplit = oldPath.split(\".\");\n                const id = parseInt(oldPathSplit[3]);\n                if (!isNaN(id)) {\n                    const valOldView = await this.stateService.getState(oldPath);\n                    if (valOldView != null) {\n                        const oldView = typeof valOldView === \"string\" ? JSON.parse(valOldView) : valOldView;\n                        if (\n                            oldView &&\n                            oldView[data.namespace] &&\n                            oldView[data.namespace][data.prefix] &&\n                            oldView[data.namespace][data.prefix][data.widgetId]\n                        ) {\n                            if (Object.keys(oldView[data.namespace]).length === 1) {\n                                delete oldView[data.namespace];\n                            } else if (Object.keys(oldView[data.namespace][data.prefix]).length === 1) {\n                                oldView[data.namespace][data.prefix];\n                            } else {\n                                delete oldView[data.namespace][data.prefix][data.widgetId];\n                            }\n                            this.stateService.setState(oldPath, JSON.stringify(oldView));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private changeOnOffSchedulesSwitchedValues(schedule: Schedule, data: any): void {\n        if (!(schedule instanceof OnOffSchedule)) {\n            this.adapter.log.error(`Cannot change switched values when schedule type is not OnOffSchedule`);\n            return;\n        }\n        if (schedule.getOnAction().getValueType() === data.valueType && schedule.getOnAction().getBooleanValue()) {\n            this.adapter.log.debug(\"Catch no boolean change!!\");\n            return;\n        }\n        schedule.setOnAction(this.changeSwitchedValueOfOnOffScheduleAction(schedule.getOnAction(), data));\n        schedule.setOffAction(this.changeSwitchedValueOfOnOffScheduleAction(schedule.getOffAction(), data));\n    }\n\n    private changeOnOffSchedulesSwitchedIds(schedule: Schedule, stateIds: string[]): void {\n        if (!(schedule instanceof OnOffSchedule)) {\n            this.adapter.log.error(`Cannot change switched ids when schedule type is not OnOffSchedule`);\n            return;\n        }\n        schedule.getOnAction().setIdsOfStatesToSet(stateIds);\n        schedule.getOffAction().setIdsOfStatesToSet(stateIds);\n    }\n\n    private changeSwitchedValueOfOnOffScheduleAction(\n        action: OnOffStateAction<string | number | boolean>,\n        data: any,\n    ): OnOffStateAction<string | number | boolean> {\n        switch (data.valueType) {\n            case \"boolean\":\n                return action.toBooleanValueType();\n                break;\n            case \"number\":\n                return action.toNumberValueType(data.onValue, data.offValue);\n                break;\n            case \"string\":\n                return action.toStringValueType(data.onValue, data.offValue);\n                break;\n            default:\n                throw new Error(`Value Type ${data.valueType} not supported`);\n        }\n    }\n\n    public destroy(): void {\n        this.triggerTimeout && this.adapter.clearTimeout(this.triggerTimeout);\n    }\n\n    private getNextTriggerId(current: Trigger[]): string {\n        const numbers = current\n            .map((t) => t.getId())\n            .map((id) => Number.parseInt(id, 10))\n            .filter((id) => !Number.isNaN(id))\n            .sort((a, b) => a - b);\n        let newId = 0;\n        for (let i = 0; i < numbers.length; i++) {\n            if (numbers[i] > newId) {\n                break;\n            } else {\n                newId++;\n            }\n        }\n        return newId.toString();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
