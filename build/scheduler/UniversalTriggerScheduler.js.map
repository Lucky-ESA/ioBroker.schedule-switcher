{
  "version": 3,
  "sources": ["../../src/scheduler/UniversalTriggerScheduler.ts"],
  "sourcesContent": ["import { LoggingService } from \"../services/LoggingService\";\nimport { Trigger } from \"../triggers/Trigger\";\nimport { TriggerScheduler } from \"./TriggerScheduler\";\n\nexport class UniversalTriggerScheduler extends TriggerScheduler {\n    private readonly schedulers: TriggerScheduler[];\n    constructor(\n        schedulers: TriggerScheduler[],\n        private readonly logger: LoggingService,\n    ) {\n        super();\n        this.schedulers = schedulers;\n    }\n\n    public register(trigger: Trigger): void {\n        const scheduler = this.schedulers.find((s) => s.forType() === trigger.constructor.name);\n        if (scheduler) {\n            return scheduler.register(trigger);\n        } else {\n            throw new Error(`Register - No scheduler for trigger of type ${trigger.constructor.name} found`);\n        }\n    }\n\n    public unregister(trigger: Trigger): void {\n        const scheduler = this.schedulers.find((s) => s.forType() === trigger.constructor.name);\n        if (scheduler) {\n            return scheduler.unregister(trigger);\n        } else {\n            throw new Error(`Unregister - No scheduler for trigger of type ${trigger.constructor.name} found`);\n        }\n    }\n\n    public loadregister(): void {\n        for (const r of this.schedulers) {\n            this.logger.logDebug(`Start UniversalTriggerScheduler`);\n            r.loadregister();\n        }\n    }\n\n    public destroy(): void {\n        this.schedulers.forEach((s) => s.destroy());\n    }\n\n    public forType(): string {\n        return \"Universal\";\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,8BAAiC;AAE1B,MAAM,kCAAkC,yCAAiB;AAAA,EAE5D,YACI,YACiB,QACnB;AACE,UAAM;AAFW;AAGjB,SAAK,aAAa;AAAA,EACtB;AAAA,EAPiB;AAAA,EASV,SAAS,SAAwB;AACpC,UAAM,YAAY,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,QAAQ,MAAM,QAAQ,YAAY,IAAI;AACtF,QAAI,WAAW;AACX,aAAO,UAAU,SAAS,OAAO;AAAA,IACrC,OAAO;AACH,YAAM,IAAI,MAAM,+CAA+C,QAAQ,YAAY,IAAI,QAAQ;AAAA,IACnG;AAAA,EACJ;AAAA,EAEO,WAAW,SAAwB;AACtC,UAAM,YAAY,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,QAAQ,MAAM,QAAQ,YAAY,IAAI;AACtF,QAAI,WAAW;AACX,aAAO,UAAU,WAAW,OAAO;AAAA,IACvC,OAAO;AACH,YAAM,IAAI,MAAM,iDAAiD,QAAQ,YAAY,IAAI,QAAQ;AAAA,IACrG;AAAA,EACJ;AAAA,EAEO,eAAqB;AACxB,eAAW,KAAK,KAAK,YAAY;AAC7B,WAAK,OAAO,SAAS,iCAAiC;AACtD,QAAE,aAAa;AAAA,IACnB;AAAA,EACJ;AAAA,EAEO,UAAgB;AACnB,SAAK,WAAW,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC;AAAA,EAC9C;AAAA,EAEO,UAAkB;AACrB,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
