{
  "version": 3,
  "sources": ["../../src/scheduler/TimeTriggerScheduler.ts"],
  "sourcesContent": ["import * as schedule from \"node-schedule\";\nimport type { LoggingService } from \"../services/LoggingService\";\nimport { TimeTrigger } from \"../triggers/TimeTrigger\";\nimport type { Trigger } from \"../triggers/Trigger\";\nimport { TriggerScheduler } from \"./TriggerScheduler\";\n\n/**\n * TimeTriggerScheduler\n */\nexport class TimeTriggerScheduler extends TriggerScheduler {\n    private registered: [TimeTrigger, schedule.Job][] = [];\n\n    /**\n     *\n     * @param scheduleJob Schedule\n     * @param cancelJob Schedule\n     * @param logger Log service\n     */\n    constructor(\n        private scheduleJob: (rule: schedule.RecurrenceRule, callback: schedule.JobCallback) => schedule.Job,\n        private cancelJob: (job: schedule.Job) => boolean,\n        private logger: LoggingService,\n    ) {\n        super();\n    }\n\n    /**\n     * @param trigger TimeTrigger\n     */\n    public register(trigger: TimeTrigger): void {\n        this.logger.logDebug(`Register TimeTriggerScheduler trigger ${trigger}`);\n        if (this.getAssociatedJob(trigger)) {\n            this.loadregister();\n            throw new Error(`TimeTriggerScheduler Trigger ${trigger} is already registered.`);\n        } else {\n            const newJob = this.scheduleJob(this.createRecurrenceRule(trigger), () => {\n                this.logger.logDebug(`Executing TimeTriggerScheduler trigger ${trigger}`);\n                trigger.getAction().execute(trigger.getData());\n            });\n            this.registered.push([trigger, newJob]);\n        }\n    }\n\n    /**\n     * loadregister\n     */\n    public loadregister(): void {\n        for (const r of this.registered) {\n            this.logger.logDebug(`Check TimeTriggerScheduler ${r[0]}`);\n        }\n    }\n\n    /**\n     * @param trigger TimeTrigger\n     */\n    public unregister(trigger: TimeTrigger): void {\n        this.logger.logDebug(`Unregister TimeTriggerScheduler trigger ${trigger}`);\n        const job = this.getAssociatedJob(trigger);\n        if (job) {\n            this.cancelJob(job);\n            this.removeTrigger(trigger);\n        } else {\n            this.loadregister();\n            if (trigger.toString().toString().indexOf(\"TimeTriggerForAstroTrigger\") !== -1) {\n                this.logger.logDebug(`TimeTriggerScheduler trigger not found!`);\n            } else {\n                throw new Error(`TimeTriggerScheduler Trigger ${trigger} is not registered.`);\n            }\n        }\n    }\n\n    /**\n     * destroy\n     */\n    public destroy(): void {\n        this.registered.forEach(r => this.unregister(r[0]));\n    }\n\n    /**\n     * forType\n     */\n    public forType(): string {\n        return TimeTrigger.prototype.constructor.name;\n    }\n\n    private getAssociatedJob(trigger: TimeTrigger): schedule.Job | null {\n        const entry = this.registered.find(r => r[0] === trigger);\n        if (entry) {\n            return entry[1];\n        }\n        this.loadregister();\n        return null;\n    }\n\n    private removeTrigger(trigger: Trigger): void {\n        this.registered = this.registered.filter(r => r[0] !== trigger);\n    }\n\n    private createRecurrenceRule(trigger: TimeTrigger): schedule.RecurrenceRule {\n        const rule = new schedule.RecurrenceRule();\n        rule.dayOfWeek = trigger.getWeekdays();\n        rule.hour = trigger.getHour();\n        rule.minute = trigger.getMinute();\n        return rule;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA0B;AAE1B,yBAA4B;AAE5B,8BAAiC;AAK1B,MAAM,6BAA6B,yCAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvD,YACY,aACA,WACA,QACV;AACE,UAAM;AAJE;AACA;AACA;AAAA,EAGZ;AAAA,EAdQ,aAA4C,CAAC;AAAA;AAAA;AAAA;AAAA,EAmB9C,SAAS,SAA4B;AACxC,SAAK,OAAO,SAAS,yCAAyC,OAAO,EAAE;AACvE,QAAI,KAAK,iBAAiB,OAAO,GAAG;AAChC,WAAK,aAAa;AAClB,YAAM,IAAI,MAAM,gCAAgC,OAAO,yBAAyB;AAAA,IACpF,OAAO;AACH,YAAM,SAAS,KAAK,YAAY,KAAK,qBAAqB,OAAO,GAAG,MAAM;AACtE,aAAK,OAAO,SAAS,0CAA0C,OAAO,EAAE;AACxE,gBAAQ,UAAU,EAAE,QAAQ,QAAQ,QAAQ,CAAC;AAAA,MACjD,CAAC;AACD,WAAK,WAAW,KAAK,CAAC,SAAS,MAAM,CAAC;AAAA,IAC1C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKO,eAAqB;AACxB,eAAW,KAAK,KAAK,YAAY;AAC7B,WAAK,OAAO,SAAS,8BAA8B,EAAE,CAAC,CAAC,EAAE;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKO,WAAW,SAA4B;AAC1C,SAAK,OAAO,SAAS,2CAA2C,OAAO,EAAE;AACzE,UAAM,MAAM,KAAK,iBAAiB,OAAO;AACzC,QAAI,KAAK;AACL,WAAK,UAAU,GAAG;AAClB,WAAK,cAAc,OAAO;AAAA,IAC9B,OAAO;AACH,WAAK,aAAa;AAClB,UAAI,QAAQ,SAAS,EAAE,SAAS,EAAE,QAAQ,4BAA4B,MAAM,IAAI;AAC5E,aAAK,OAAO,SAAS,yCAAyC;AAAA,MAClE,OAAO;AACH,cAAM,IAAI,MAAM,gCAAgC,OAAO,qBAAqB;AAAA,MAChF;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAKO,UAAgB;AACnB,SAAK,WAAW,QAAQ,OAAK,KAAK,WAAW,EAAE,CAAC,CAAC,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKO,UAAkB;AACrB,WAAO,+BAAY,UAAU,YAAY;AAAA,EAC7C;AAAA,EAEQ,iBAAiB,SAA2C;AAChE,UAAM,QAAQ,KAAK,WAAW,KAAK,OAAK,EAAE,CAAC,MAAM,OAAO;AACxD,QAAI,OAAO;AACP,aAAO,MAAM,CAAC;AAAA,IAClB;AACA,SAAK,aAAa;AAClB,WAAO;AAAA,EACX;AAAA,EAEQ,cAAc,SAAwB;AAC1C,SAAK,aAAa,KAAK,WAAW,OAAO,OAAK,EAAE,CAAC,MAAM,OAAO;AAAA,EAClE;AAAA,EAEQ,qBAAqB,SAA+C;AACxE,UAAM,OAAO,IAAI,SAAS,eAAe;AACzC,SAAK,YAAY,QAAQ,YAAY;AACrC,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,SAAS,QAAQ,UAAU;AAChC,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
