{
  "version": 3,
  "sources": ["../../src/scheduler/TimeTriggerScheduler.ts"],
  "sourcesContent": ["import { Job, JobCallback, RecurrenceRule } from \"node-schedule\";\nimport { LoggingService } from \"../services/LoggingService\";\nimport { StateService } from \"../services/StateService\";\nimport { TimeTrigger } from \"../triggers/TimeTrigger\";\nimport { Trigger } from \"../triggers/Trigger\";\nimport { TriggerScheduler } from \"./TriggerScheduler\";\n\nexport class TimeTriggerScheduler extends TriggerScheduler {\n    private registered: [TimeTrigger, Job][] = [];\n\n    constructor(\n        private stateService: StateService,\n        private scheduleJob: (rule: RecurrenceRule, callback: JobCallback) => Job,\n        private cancelJob: (job: Job) => boolean,\n        private logger: LoggingService,\n    ) {\n        super();\n        if (stateService == null) {\n            throw new Error(\"StateService may not be null or undefined.\");\n        }\n        this.stateService = stateService;\n    }\n\n    public register(trigger: TimeTrigger): void {\n        this.logger.logDebug(`Register TimeTriggerScheduler trigger ${trigger}`);\n        if (this.getAssociatedJob(trigger)) {\n            this.logger.logWarn(`TimeTriggerScheduler Trigger ${trigger} is already registered.`);\n        } else {\n            const newJob = this.scheduleJob(this.createRecurrenceRule(trigger), () => {\n                this.logger.logDebug(`Executing TimeTriggerScheduler trigger ${trigger}`);\n                trigger.getAction().execute(trigger.getData() as any);\n            });\n            this.registered.push([trigger, newJob]);\n        }\n    }\n\n    public loadregister(): void {\n        for (const r of this.registered) {\n            this.logger.logDebug(`Check TimeTriggerScheduler ${r[0]}`);\n        }\n    }\n\n    public unregister(trigger: TimeTrigger): void {\n        this.logger.logDebug(`Unregister TimeTriggerScheduler trigger ${trigger}`);\n        const job = this.getAssociatedJob(trigger);\n        if (job) {\n            this.cancelJob(job);\n            this.removeTrigger(trigger);\n        } else {\n            this.logger.logWarn(`TimeTriggerScheduler Trigger ${trigger} is not registered.`);\n            this.loadregister();\n        }\n    }\n\n    public destroy(): void {\n        this.registered.forEach((r) => this.unregister(r[0]));\n    }\n\n    public forType(): string {\n        return TimeTrigger.prototype.constructor.name;\n    }\n\n    private getAssociatedJob(trigger: TimeTrigger): Job | null {\n        const entry = this.registered.find((r) => r[0] === trigger);\n        if (entry) {\n            return entry[1];\n        } else {\n            this.loadregister();\n            return null;\n        }\n    }\n\n    private removeTrigger(trigger: Trigger): void {\n        this.registered = this.registered.filter((r) => r[0] !== trigger);\n    }\n\n    private createRecurrenceRule(trigger: TimeTrigger): RecurrenceRule {\n        const rule = new RecurrenceRule();\n        rule.dayOfWeek = trigger.getWeekdays();\n        rule.hour = trigger.getHour();\n        rule.minute = trigger.getMinute();\n        return rule;\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAiD;AAGjD,yBAA4B;AAE5B,8BAAiC;AAE1B,MAAM,6BAA6B,yCAAiB;AAAA,EAGvD,YACY,cACA,aACA,WACA,QACV;AACE,UAAM;AALE;AACA;AACA;AACA;AAGR,QAAI,gBAAgB,MAAM;AACtB,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AACA,SAAK,eAAe;AAAA,EACxB;AAAA,EAbQ,aAAmC,CAAC;AAAA,EAerC,SAAS,SAA4B;AACxC,SAAK,OAAO,SAAS,yCAAyC,OAAO,EAAE;AACvE,QAAI,KAAK,iBAAiB,OAAO,GAAG;AAChC,WAAK,OAAO,QAAQ,gCAAgC,OAAO,yBAAyB;AAAA,IACxF,OAAO;AACH,YAAM,SAAS,KAAK,YAAY,KAAK,qBAAqB,OAAO,GAAG,MAAM;AACtE,aAAK,OAAO,SAAS,0CAA0C,OAAO,EAAE;AACxE,gBAAQ,UAAU,EAAE,QAAQ,QAAQ,QAAQ,CAAQ;AAAA,MACxD,CAAC;AACD,WAAK,WAAW,KAAK,CAAC,SAAS,MAAM,CAAC;AAAA,IAC1C;AAAA,EACJ;AAAA,EAEO,eAAqB;AACxB,eAAW,KAAK,KAAK,YAAY;AAC7B,WAAK,OAAO,SAAS,8BAA8B,EAAE,CAAC,CAAC,EAAE;AAAA,IAC7D;AAAA,EACJ;AAAA,EAEO,WAAW,SAA4B;AAC1C,SAAK,OAAO,SAAS,2CAA2C,OAAO,EAAE;AACzE,UAAM,MAAM,KAAK,iBAAiB,OAAO;AACzC,QAAI,KAAK;AACL,WAAK,UAAU,GAAG;AAClB,WAAK,cAAc,OAAO;AAAA,IAC9B,OAAO;AACH,WAAK,OAAO,QAAQ,gCAAgC,OAAO,qBAAqB;AAChF,WAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA,EAEO,UAAgB;AACnB,SAAK,WAAW,QAAQ,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC,CAAC,CAAC;AAAA,EACxD;AAAA,EAEO,UAAkB;AACrB,WAAO,+BAAY,UAAU,YAAY;AAAA,EAC7C;AAAA,EAEQ,iBAAiB,SAAkC;AACvD,UAAM,QAAQ,KAAK,WAAW,KAAK,CAAC,MAAM,EAAE,CAAC,MAAM,OAAO;AAC1D,QAAI,OAAO;AACP,aAAO,MAAM,CAAC;AAAA,IAClB,OAAO;AACH,WAAK,aAAa;AAClB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EAEQ,cAAc,SAAwB;AAC1C,SAAK,aAAa,KAAK,WAAW,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,OAAO;AAAA,EACpE;AAAA,EAEQ,qBAAqB,SAAsC;AAC/D,UAAM,OAAO,IAAI,oCAAe;AAChC,SAAK,YAAY,QAAQ,YAAY;AACrC,SAAK,OAAO,QAAQ,QAAQ;AAC5B,SAAK,SAAS,QAAQ,UAAU;AAChC,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
